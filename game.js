// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var tofu_events_EventBase = function(is_enabled,dispatch_once) {
	if(dispatch_once == null) {
		dispatch_once = false;
	}
	if(is_enabled == null) {
		is_enabled = false;
	}
	this.c_enabled = is_enabled;
	this.c_dispatch_once = dispatch_once;
	this.clear();
};
tofu_events_EventBase.__name__ = ["tofu","events","EventBase"];
tofu_events_EventBase.prototype = {
	clear: function() {
		this.c_base = [];
		this.numListeners = 0;
	}
	,on: function(listener,priority) {
		if(priority == null || priority > this.numListeners) {
			priority = this.numListeners;
		} else if(priority < 0) {
			priority = 0;
		}
		var i = this.c_base.indexOf(listener);
		if(i == -1) {
			if(this.c_enabled) {
				if(!this.c_dispatch_once) {
					this.c_base.splice(priority,0,listener);
					this.numListeners++;
				}
				this.execute_listener(listener);
			} else {
				this.c_base.splice(priority,0,listener);
				this.numListeners++;
			}
			return true;
		} else {
			this.c_base.splice(i,1);
			this.c_base.splice(priority,0,listener);
		}
		return false;
	}
	,off: function(listener) {
		var i = this.c_base.indexOf(listener);
		if(i != -1) {
			this.c_base.splice(i,1);
			this.numListeners--;
			return true;
		}
		return false;
	}
	,has: function(listener) {
		return this.c_base.indexOf(listener) != -1;
	}
	,execute_all: function() {
		var i = -1;
		while(++i < this.numListeners) this.execute_listener(this.c_base[i]);
		if(this.c_dispatch_once) {
			this.clear();
		}
	}
	,execute_listener: function(listener) {
		ReflectTools.call(listener,null);
	}
	,get_isEnabled: function() {
		return this.c_enabled;
	}
	,set_isEnabled: function(val) {
		if(val) {
			this.execute_all();
		}
		return this.c_enabled = val;
	}
	,get_dispatchOnce: function() {
		return this.c_dispatch_once;
	}
	,set_dispatchOnce: function(val) {
		return this.c_dispatch_once = val;
	}
	,__class__: tofu_events_EventBase
};
var tofu_events_Event0 = function(is_enabled,dispatch_once) {
	if(dispatch_once == null) {
		dispatch_once = false;
	}
	if(is_enabled == null) {
		is_enabled = false;
	}
	tofu_events_EventBase.call(this,is_enabled,dispatch_once);
};
tofu_events_Event0.__name__ = ["tofu","events","Event0"];
tofu_events_Event0.__super__ = tofu_events_EventBase;
tofu_events_Event0.prototype = $extend(tofu_events_EventBase.prototype,{
	dispatch: function(enable,remove_listeners) {
		if(remove_listeners == null) {
			remove_listeners = false;
		}
		if(enable == null) {
			enable = false;
		}
		this.c_enabled = enable;
		this.execute_all();
		if(remove_listeners) {
			this.clear();
		}
	}
	,__class__: tofu_events_Event0
});
var App = function() { };
App.__name__ = ["App"];
App.start = function(app_name,width,height,min_width,min_height) {
	if(App.isStarted) {
		return;
	} else {
		App.isStarted = true;
	}
	App.WIDTH = width < 2 ? 2 : width;
	App.HEIGHT = height < 2 ? 2 : height;
	App.MIN_WIDTH = min_width == null || min_width > width ? width : min_width;
	App.MIN_HEIGHT = min_height == null || min_height > height ? height : min_height;
	byteware_Ticker.normalize();
	App.ticker = new byteware_Ticker(true,false);
	App.root = new byteware_RootContainer(App.WIDTH,App.HEIGHT);
	App.platform = new platform_html5_HTML5Platform(app_name);
	App.g_renderer = App.platform.get_renderer();
	SFX.init();
	App.onStarted.dispatch(true,true);
};
App.pause = function(state) {
	if(App.isPaused == state) {
		return;
	} else {
		App.isPaused = state;
	}
	byteware_Ticker.event_pause(state);
	SFX.event_pause(state);
	if(state) {
		App.onPause.dispatch(false,false);
	} else {
		App.onResume.dispatch(false,false);
	}
};
App.event_render = function() {
	if(App.isActive) {
		byteware_Ticker.event_update();
		var context = App.g_renderer.context;
		App.g_renderer.pre_render();
		App.root.render(context,0,0);
		App.g_renderer.post_render();
	}
};
App.event_activate = function() {
	if(!App.isActive) {
		byteware_Ticker.normalize();
		SFX.event_activate(true);
		App.onActivate.dispatch(false,false);
		App.isActive = true;
	}
};
App.event_deactivate = function() {
	if(App.isActive) {
		App.isActive = false;
	} else {
		return;
	}
	SFX.event_activate(false);
	App.onDeactivate.dispatch(false,false);
};
App.event_resize = function(w,h) {
	var landscape = w > h;
	var scale = 1.0;
	if(landscape) {
		var scale_w = w / App.MIN_WIDTH;
		var scale_h = h / App.MIN_HEIGHT;
		if(scale_w < scale_h) {
			scale = scale_w;
		} else {
			scale = scale_h;
		}
		App.TOP = (App.HEIGHT - App.MIN_HEIGHT) * .5 | 0;
		App.BOTTOM = App.TOP + App.MIN_HEIGHT | 0;
		App.LEFT = (App.WIDTH - w / scale) * .5 | 0;
		App.RIGHT = App.LEFT + w / scale | 0;
	} else {
		scale = w / App.MIN_WIDTH;
		if(h * scale > App.MIN_HEIGHT * scale) {
			var ws = h / App.MIN_HEIGHT;
			if(ws < scale) {
				scale = ws;
			} else {
				scale = scale;
			}
		}
		App.TOP = (App.HEIGHT - h / scale) * .5 | 0;
		App.BOTTOM = App.TOP + h / scale | 0;
		App.LEFT = (App.WIDTH - App.MIN_WIDTH) * .5 | 0;
		App.RIGHT = App.LEFT + App.MIN_WIDTH | 0;
	}
	if(App.TOP < 0) {
		App.TOP = 0;
	}
	if(App.BOTTOM > App.HEIGHT) {
		App.BOTTOM = App.HEIGHT;
	}
	if(App.LEFT < 0) {
		App.LEFT = 0;
	}
	if(App.RIGHT > App.WIDTH) {
		App.RIGHT = App.WIDTH;
	}
	App.CURRENT_WIDTH = App.RIGHT - App.LEFT;
	App.CURRENT_HEIGHT = App.BOTTOM - App.TOP;
	if(App.root != null) {
		App.root.transform((w - App.WIDTH * scale) * .5,(h - App.HEIGHT * scale) * .5,scale,scale,0.0,0.0);
	}
	App.onResize.dispatch(false,false);
};
var byteware_geom_Transform = function(x,y,scaleX,scaleY,pivotX,pivotY) {
	if(pivotY == null) {
		pivotY = 0.0;
	}
	if(pivotX == null) {
		pivotX = 0.0;
	}
	if(scaleY == null) {
		scaleY = 1.0;
	}
	if(scaleX == null) {
		scaleX = 1.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.bounds = new byteware_geom_Rect();
	this.c_mat = new byteware_geom_Mat();
	this.c_skewX = this.c_skewY = this.c_deg = this.c_rad = 0.0;
	this.c_w = this.c_h = 0;
	this.transform(x,y,scaleX,scaleY,pivotX,pivotY);
};
byteware_geom_Transform.__name__ = ["byteware","geom","Transform"];
byteware_geom_Transform.prototype = {
	transform: function(x,y,scaleX,scaleY,pivotX,pivotY) {
		if(pivotY == null) {
			pivotY = 0.0;
		}
		if(pivotX == null) {
			pivotX = 0.0;
		}
		if(scaleY == null) {
			scaleY = 1.0;
		}
		if(scaleX == null) {
			scaleX = 1.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.c_x = x;
		this.c_y = y;
		this.c_scaleX = scaleX;
		this.c_scaleY = scaleY;
		this.c_pivotX = pivotX;
		this.c_pivotY = pivotY;
		this.apply_transform();
	}
	,pos: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.c_x = x;
		this.c_y = y;
		this.apply_transform();
	}
	,resize: function(w,h) {
		if(h == null) {
			h = 0.0;
		}
		if(w == null) {
			w = 0.0;
		}
		this.c_w = w > 0.0 ? w | 0 : 0;
		this.c_h = h > 0.0 ? h | 0 : 0;
		this.update_bounds();
	}
	,scale: function(x,y) {
		if(y == null) {
			y = 1.0;
		}
		if(x == null) {
			x = 1.0;
		}
		this.c_scaleX = x;
		this.c_scaleY = y;
		this.apply_transform();
	}
	,skew: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.c_skewX = x;
		this.c_skewY = y;
		this.apply_transform();
	}
	,pivot: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.c_pivotX = x;
		this.c_pivotY = y;
		this.apply_transform();
	}
	,anchor: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.c_pivotX = this.c_w * x;
		this.c_pivotY = this.c_h * y;
		this.apply_transform();
	}
	,copyTransform: function(to) {
		if(to == null) {
			to = new byteware_geom_Transform();
		}
		to.resize(this.c_w,this.c_h);
		to.set_mat(this.c_mat);
		return to;
	}
	,resetTransform: function() {
		this.c_x = this.c_y = this.c_pivotX = this.c_pivotY = this.c_skewX = this.c_skewY = this.c_deg = this.c_rad = 0.0;
		this.c_scaleX = this.c_scaleY = 1.0;
		this.apply_transform();
	}
	,apply_transform: function() {
		if(this.c_skewX == 0.0 && this.c_skewY == 0.0) {
			if(this.c_rad == 0.0) {
				this.c_mat.set(this.c_scaleX,0.0,0.0,this.c_scaleY,this.c_x - this.c_pivotX * this.c_scaleX,this.c_y - this.c_pivotY * this.c_scaleY);
			} else {
				var sin = Math.sin(this.c_rad);
				var cos = Math.cos(this.c_rad);
				var a = this.c_scaleX * cos;
				var b = this.c_scaleX * sin;
				var c = this.c_scaleY * -sin;
				var d = this.c_scaleY * cos;
				var e = this.c_x - this.c_pivotX * a - this.c_pivotY * c;
				var f = this.c_y - this.c_pivotX * b - this.c_pivotY * d;
				this.c_mat.set(a,b,c,d,e,f);
			}
		} else {
			this.c_mat.set();
			this.c_mat.scale(this.c_scaleX,this.c_scaleY);
			this.c_mat.skew(this.c_skewX,this.c_skewY);
			this.c_mat.rotate_deg(this.c_rad * 180.0 / 3.141592653589793);
			this.c_mat.translate(this.c_x,this.c_y);
			if(this.c_pivotX != 0.0 || this.c_pivotY != 0.0) {
				this.c_mat.e = this.c_x - this.c_mat.a * this.c_pivotX - this.c_mat.c * this.c_pivotY;
				this.c_mat.f = this.c_y - this.c_mat.b * this.c_pivotX - this.c_mat.d * this.c_pivotY;
			}
		}
		this.update_bounds();
		this.event_transform();
	}
	,update_bounds: function() {
		this.bounds.set(0.0,0.0,this.c_w,this.c_h);
		this.c_mat.transformRect(this.bounds,null);
	}
	,event_transform: function() {
		if(this.e_transform != null) {
			this.e_transform.dispatch(false,false);
		}
	}
	,get_onTransform: function() {
		if(this.e_transform == null) {
			this.e_transform = new tofu_events_Event0(false,false);
		}
		return this.e_transform;
	}
	,get_mat: function() {
		return this.c_mat;
	}
	,set_mat: function(val) {
		val.copy(this.c_mat);
		this.c_pivotX = this.c_pivotY = 0.0;
		this.c_x = val.e;
		this.c_y = val.f;
		this.c_skewX = Math.atan(-val.c / val.d);
		this.c_skewY = Math.atan(val.b / val.a);
		this.c_scaleX = this.c_skewY > -0.78539816339744828 && this.c_skewY < 0.7853981633974483 ? val.a / Math.cos(this.c_skewY) : val.b / Math.sin(this.c_skewY);
		this.c_scaleY = this.c_skewX > -0.78539816339744828 && this.c_skewX < 0.7853981633974483 ? val.d / Math.cos(this.c_skewX) : -val.c / Math.sin(this.c_skewX);
		if(this.c_skewX - .0001 < this.c_skewY && this.c_skewX + .0001 > this.c_skewY) {
			this.c_rad = this.c_skewX;
			this.c_deg = this.c_skewX * 180.0 / 3.141592653589793;
			this.c_skewX = this.c_skewY = 0.0;
		} else {
			this.c_rad = this.c_deg = 0.0;
		}
		this.apply_transform();
		return val;
	}
	,get_x: function() {
		return this.c_x;
	}
	,set_x: function(val) {
		if(val != this.c_x) {
			this.c_x = val;
			this.apply_transform();
		}
		return val;
	}
	,get_y: function() {
		return this.c_y;
	}
	,set_y: function(val) {
		if(val != this.c_y) {
			this.c_y = val;
			this.apply_transform();
		}
		return val;
	}
	,get_w: function() {
		return this.c_w;
	}
	,set_w: function(val) {
		if(val < 0.0) {
			val = 0.0;
		}
		var width = val | 0;
		if(width != this.c_w) {
			this.c_w = width;
			this.update_bounds();
		}
		return val;
	}
	,get_h: function() {
		return this.c_h;
	}
	,set_h: function(val) {
		if(val < 0.0) {
			val = 0.0;
		}
		var height = val | 0;
		if(height != this.c_h) {
			this.c_h = height;
			this.update_bounds();
		}
		return val;
	}
	,get_scaleX: function() {
		return this.c_scaleX;
	}
	,set_scaleX: function(val) {
		if(val != this.c_scaleX) {
			this.c_scaleX = val;
			this.apply_transform();
		}
		return val;
	}
	,get_scaleY: function() {
		return this.c_scaleY;
	}
	,set_scaleY: function(val) {
		if(val != this.c_scaleY) {
			this.c_scaleY = val;
			this.apply_transform();
		}
		return val;
	}
	,get_skewX: function() {
		return this.c_skewX;
	}
	,set_skewX: function(val) {
		val = MathTools.normalize_rad(val);
		if(val != this.c_skewX) {
			this.c_skewX = val;
			this.apply_transform();
		}
		return val;
	}
	,get_skewY: function() {
		return this.c_skewY;
	}
	,set_skewY: function(val) {
		val = MathTools.normalize_rad(val);
		if(val != this.c_skewY) {
			this.c_skewY = val;
			this.apply_transform();
		}
		return val;
	}
	,get_pivotX: function() {
		return this.c_pivotX;
	}
	,set_pivotX: function(val) {
		if(val != this.c_pivotX) {
			this.c_pivotX = val;
			this.apply_transform();
		}
		return val;
	}
	,get_pivotY: function() {
		return this.c_pivotY;
	}
	,set_pivotY: function(val) {
		if(val != this.c_pivotY) {
			this.c_pivotY = val;
			this.apply_transform();
		}
		return val;
	}
	,get_deg: function() {
		return this.c_deg;
	}
	,set_deg: function(val) {
		val = MathTools.normalize_deg(val);
		if(val != this.c_deg) {
			this.c_deg = val;
			this.c_rad = val * 3.141592653589793 / 180.0;
			this.apply_transform();
		}
		return val;
	}
	,get_rad: function() {
		return this.c_rad;
	}
	,set_rad: function(val) {
		val = MathTools.normalize_rad(val);
		if(val != this.c_rad) {
			this.c_rad = val;
			this.c_deg = val * 180.0 / 3.141592653589793;
			this.apply_transform();
		}
		return val;
	}
	,__class__: byteware_geom_Transform
};
var byteware_graphics_RenderObject = function(x,y,scaleX,scaleY,pivotX,pivotY) {
	if(pivotY == null) {
		pivotY = 0.0;
	}
	if(pivotX == null) {
		pivotX = 0.0;
	}
	if(scaleY == null) {
		scaleY = 1.0;
	}
	if(scaleX == null) {
		scaleX = 1.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	byteware_geom_Transform.call(this,x,y,scaleX,scaleY,pivotX,pivotY);
	this.c_vis = true;
	this.c_vis_area = null;
	this.c_alpha = 1.0;
};
byteware_graphics_RenderObject.__name__ = ["byteware","graphics","RenderObject"];
byteware_graphics_RenderObject.__super__ = byteware_geom_Transform;
byteware_graphics_RenderObject.prototype = $extend(byteware_geom_Transform.prototype,{
	crop: function(x,y,w,h) {
		if(h == null) {
			h = 0.0;
		}
		if(w == null) {
			w = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		if(this.c_vis_area == null) {
			this.c_vis_area = new byteware_geom_Rect(x,y,w,h);
		} else {
			this.c_vis_area.set(x,y,w,h);
		}
	}
	,draw: function(context) {
	}
	,render: function(context,offsetX,offsetY) {
		if(!this.c_vis || this.c_alpha == 0.0) {
			return;
		}
		context.save();
		if(this.c_alpha < 1.0) {
			context.adjustAlpha(this.c_alpha);
		}
		var e = Math.round(this.c_mat.e);
		var f = Math.round(this.c_mat.f);
		context.transform(this.c_mat.a,this.c_mat.b,this.c_mat.c,this.c_mat.d,e + offsetX,f + offsetY);
		if(this.c_vis_area != null) {
			context.crop(this.c_vis_area.x | 0,this.c_vis_area.y | 0,this.c_vis_area.w | 0,this.c_vis_area.h | 0);
		}
		this.draw(context);
		context.restore();
	}
	,event_vischange: function() {
		if(this.e_vischange != null) {
			this.e_vischange.dispatch(false,false);
		}
	}
	,get_onVisChange: function() {
		if(this.e_vischange == null) {
			this.e_vischange = new tofu_events_Event0(false,false);
		}
		return this.e_vischange;
	}
	,get_isVisible: function() {
		return this.c_vis;
	}
	,set_isVisible: function(val) {
		if(val != this.c_vis) {
			this.c_vis = val;
			this.event_vischange();
		}
		return val;
	}
	,get_visibleArea: function() {
		return this.c_vis_area;
	}
	,set_visibleArea: function(val) {
		this.c_vis_area = val == null ? null : val.copy(this.c_vis_area);
		this.event_vischange();
		return val;
	}
	,get_alpha: function() {
		return this.c_alpha;
	}
	,set_alpha: function(val) {
		if(val < 0.0) {
			val = 0.0;
		} else if(val > 1.0) {
			val = 1.0;
		}
		if(val != this.c_alpha) {
			this.c_alpha = val;
			this.event_vischange();
		}
		return val;
	}
	,__class__: byteware_graphics_RenderObject
});
var DisplayObject = function(x,y,scaleX,scaleY,pivotX,pivotY) {
	if(pivotY == null) {
		pivotY = 0.0;
	}
	if(pivotX == null) {
		pivotX = 0.0;
	}
	if(scaleY == null) {
		scaleY = 1.0;
	}
	if(scaleX == null) {
		scaleX = 1.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	byteware_graphics_RenderObject.call(this,x,y,scaleX,scaleY,pivotX,pivotY);
	this.pointer = new byteware_geom_Pos();
	this.parent = null;
	this.c_touchable = true;
	this.isAdded = this.isTouched = this.isOver = false;
};
DisplayObject.__name__ = ["DisplayObject"];
DisplayObject.__super__ = byteware_graphics_RenderObject;
DisplayObject.prototype = $extend(byteware_graphics_RenderObject.prototype,{
	event_added: function() {
		if(this.isAdded) {
			return;
		} else {
			this.isAdded = true;
		}
		if(this.e_added != null) {
			this.e_added.dispatch(false,false);
		}
	}
	,event_removed: function() {
		if(this.isAdded) {
			this.isAdded = false;
		} else {
			return;
		}
		if(this.e_removed != null) {
			this.e_removed.dispatch(false,false);
		}
	}
	,event_touch_begin: function() {
		if(this.isTouched) {
			return;
		} else {
			this.isTouched = true;
		}
		if(this.e_touch_begin != null) {
			this.e_touch_begin.dispatch(false,false);
		}
	}
	,event_touch_end: function() {
		if(this.isTouched) {
			this.isTouched = false;
		} else {
			return;
		}
		if(this.e_touch_end != null) {
			this.e_touch_end.dispatch(false,false);
		}
	}
	,event_touch_move: function() {
	}
	,event_touch_over: function() {
		if(this.isOver) {
			return;
		} else {
			this.isOver = true;
		}
		if(this.e_touch_over != null) {
			this.e_touch_over.dispatch(false,false);
		}
	}
	,event_touch_out: function() {
		if(this.isOver) {
			this.isOver = false;
		} else {
			return;
		}
		if(this.e_touch_out != null) {
			this.e_touch_out.dispatch(false,false);
		}
	}
	,submit_touch: function(x,y,state) {
		if(!this.c_vis || !this.c_touchable) {
			return null;
		}
		this.c_mat.inv_transformCoords(x,y,this.pointer);
		var contains = this.c_vis_area == null ? this.pointer.x >= 0 && this.pointer.y >= 0 && this.pointer.x < this.c_w && this.pointer.y < this.c_h : this.c_vis_area.containsCoords(this.pointer.x,this.pointer.y);
		if(!contains && this.isOver) {
			this.event_touch_out();
		}
		if(contains) {
			return this;
		} else {
			return null;
		}
	}
	,get_onAdded: function() {
		if(this.e_added == null) {
			this.e_added = new tofu_events_Event0(false,false);
		}
		return this.e_added;
	}
	,get_onRemoved: function() {
		if(this.e_removed == null) {
			this.e_removed = new tofu_events_Event0(false,false);
		}
		return this.e_removed;
	}
	,get_onTouchBegin: function() {
		if(this.e_touch_begin == null) {
			this.e_touch_begin = new tofu_events_Event0(false,false);
		}
		return this.e_touch_begin;
	}
	,get_onTouchEnd: function() {
		if(this.e_touch_end == null) {
			this.e_touch_end = new tofu_events_Event0(false,false);
		}
		return this.e_touch_end;
	}
	,get_onOver: function() {
		if(this.e_touch_over == null) {
			this.e_touch_over = new tofu_events_Event0(false,false);
		}
		return this.e_touch_over;
	}
	,get_onOut: function() {
		if(this.e_touch_out == null) {
			this.e_touch_out = new tofu_events_Event0(false,false);
		}
		return this.e_touch_out;
	}
	,get_isTouchable: function() {
		return this.c_touchable;
	}
	,set_isTouchable: function(val) {
		if(!val && (this.isOver || this.isTouched)) {
			this.event_touch_out();
		}
		return this.c_touchable;
	}
	,__class__: DisplayObject
});
var Sprite = function(texture,x,y,scaleX,scaleY,useTexturePivot) {
	if(useTexturePivot == null) {
		useTexturePivot = true;
	}
	if(scaleY == null) {
		scaleY = 1.0;
	}
	if(scaleX == null) {
		scaleX = 1.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	DisplayObject.call(this,x,y,scaleX,scaleY,this.get_pivotX(),this.get_pivotY());
	this.c_use_pivot = useTexturePivot;
	this.set_texture(texture);
};
Sprite.__name__ = ["Sprite"];
Sprite.__super__ = DisplayObject;
Sprite.prototype = $extend(DisplayObject.prototype,{
	resize: function(w,h) {
		if(h == null) {
			h = 0.0;
		}
		if(w == null) {
			w = 0.0;
		}
		this.c_scaleX = w / this.c_w;
		this.c_scaleY = h / this.c_h;
		this.apply_transform();
	}
	,draw: function(context) {
		if(this.c_texture != null) {
			context.drawTexture(this.c_texture,0,0);
		}
	}
	,get_texture: function() {
		return this.c_texture;
	}
	,set_texture: function(val) {
		if(val != this.c_texture) {
			this.c_texture = val;
			if(val != null) {
				this.c_w = this.c_texture.w;
				this.c_h = this.c_texture.h;
				if(this.c_use_pivot) {
					this.c_pivotX = this.c_texture.pivotX;
					this.c_pivotY = this.c_texture.pivotY;
					this.apply_transform();
				} else {
					this.update_bounds();
				}
				this.event_vischange();
			} else {
				this.c_w = this.c_h = 0;
			}
		}
		return val;
	}
	,get_useTexturePivot: function() {
		return this.c_use_pivot;
	}
	,set_useTexturePivot: function(val) {
		if(val && this.c_texture != null) {
			this.c_pivotX = this.c_texture.pivotX;
			this.c_pivotY = this.c_texture.pivotY;
			this.apply_transform();
		}
		return this.c_use_pivot = val;
	}
	,get_w: function() {
		return this.c_w * this.c_scaleX;
	}
	,set_w: function(val) {
		var scale = val / this.c_w;
		if(scale != this.c_scaleX) {
			this.c_scaleX = scale;
			this.apply_transform();
		}
		return val;
	}
	,get_h: function() {
		return this.c_h * this.c_scaleY;
	}
	,set_h: function(val) {
		var scale = val / this.c_h;
		if(scale != this.c_scaleY) {
			this.c_scaleY = scale;
			this.apply_transform();
		}
		return val;
	}
	,__class__: Sprite
});
var Bunny = function(x,y) {
	var id = Std.random(3);
	this.c_textures = [Main.gfx.getTexture(id + "_0"),Main.gfx.getTexture(id + "_1")];
	this.c_curr_id = Math.random() > .5 ? 1 : 0;
	Sprite.call(this,this.c_textures[this.c_curr_id],x,y);
};
Bunny.__name__ = ["Bunny"];
Bunny.__super__ = Sprite;
Bunny.prototype = $extend(Sprite.prototype,{
	hit: function() {
		this.c_curr_id = this.c_curr_id == 0 ? 1 : 0;
		this.set_texture(this.c_textures[this.c_curr_id]);
	}
	,__class__: Bunny
});
var Direction = { __ename__ : true, __constructs__ : ["UP","DOWN","LEFT","RIGHT","CENTER","UP_LEFT","UP_RIGHT","DOWN_LEFT","DOWN_RIGHT"] };
Direction.UP = ["UP",0];
Direction.UP.__enum__ = Direction;
Direction.DOWN = ["DOWN",1];
Direction.DOWN.__enum__ = Direction;
Direction.LEFT = ["LEFT",2];
Direction.LEFT.__enum__ = Direction;
Direction.RIGHT = ["RIGHT",3];
Direction.RIGHT.__enum__ = Direction;
Direction.CENTER = ["CENTER",4];
Direction.CENTER.__enum__ = Direction;
Direction.UP_LEFT = ["UP_LEFT",5];
Direction.UP_LEFT.__enum__ = Direction;
Direction.UP_RIGHT = ["UP_RIGHT",6];
Direction.UP_RIGHT.__enum__ = Direction;
Direction.DOWN_LEFT = ["DOWN_LEFT",7];
Direction.DOWN_LEFT.__enum__ = Direction;
Direction.DOWN_RIGHT = ["DOWN_RIGHT",8];
Direction.DOWN_RIGHT.__enum__ = Direction;
var DisplayContainer = function(x,y,scaleX,scaleY,pivotX,pivotY) {
	if(pivotY == null) {
		pivotY = 0.0;
	}
	if(pivotX == null) {
		pivotX = 0.0;
	}
	if(scaleY == null) {
		scaleY = 1.0;
	}
	if(scaleX == null) {
		scaleX = 1.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	DisplayObject.call(this,x,y,scaleX,scaleY,pivotX,pivotY);
	this.numChildren = 0;
	this.c_touchgroup = false;
	this.c_children = [];
	this.cf_sort = null;
};
DisplayContainer.__name__ = ["DisplayContainer"];
DisplayContainer.__super__ = DisplayObject;
DisplayContainer.prototype = $extend(DisplayObject.prototype,{
	draw: function(context) {
		if(this.cf_sort != null) {
			this.c_children.sort(this.cf_sort);
		}
		var i = -1;
		while(++i < this.numChildren) this.c_children[i].render(context,0,0);
	}
	,sort: function(func,once) {
		if(once == null) {
			once = true;
		}
		if(func == null || !once) {
			this.cf_sort = func;
		} else {
			this.c_children.sort(func);
		}
	}
	,addChild: function(child) {
		return this.addChildAt(child,this.numChildren);
	}
	,addChildAt: function(child,index) {
		if(index < 0) {
			index = 0;
		} else if(index > this.numChildren) {
			index = this.numChildren;
		}
		if(child.parent == this) {
			this.setChildIndex(child,index);
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.c_children.splice(index,0,child);
			child.parent = this;
			this.numChildren++;
			if(this.isAdded) {
				child.event_added();
			}
			this.update_bounds();
			this.event_vischange();
		}
		return child;
	}
	,removeChild: function(child) {
		var index = this.c_children.indexOf(child);
		if(index == -1) {
			return child;
		} else {
			return this.removeChildAt(index);
		}
	}
	,removeChildAt: function(index) {
		if(index < 0) {
			index = 0;
		} else if(index > this.numChildren - 1) {
			index = this.numChildren - 1;
		}
		var child = this.c_children[index];
		if(child != null) {
			child.event_removed();
			child.parent = null;
			this.c_children.splice(index,1);
			this.numChildren--;
			this.update_bounds();
			this.event_vischange();
		}
		return child;
	}
	,removeChildren: function(from,to) {
		if(to == null) {
			to = -1;
		}
		if(from == null) {
			from = 0;
		}
		if(to < 0) {
			to = this.numChildren;
		}
		while(from < to) {
			this.removeChildAt(from);
			++from;
		}
	}
	,getChildAt: function(index) {
		if(index < 0) {
			index = 0;
		} else if(index > this.numChildren - 1) {
			index = this.numChildren - 1;
		}
		return this.c_children[index];
	}
	,getChildIndex: function(child) {
		return this.c_children.indexOf(child);
	}
	,setChildIndex: function(child,index) {
		if(index < 0) {
			index = 0;
		} else if(index > this.numChildren - 1) {
			index = this.numChildren - 1;
		}
		var prev = this.c_children.indexOf(child);
		if(prev != index && prev != -1) {
			this.c_children.splice(prev,1);
			this.c_children.splice(index,0,child);
			return true;
		}
		return false;
	}
	,swapChildren: function(child_1,child_2) {
		var index_1 = this.c_children.indexOf(child_1);
		var index_2 = this.c_children.indexOf(child_2);
		if(index_1 != -1 && index_2 != -1) {
			this.c_children[index_1] = child_2;
			this.c_children[index_2] = child_1;
			return true;
		}
		return false;
	}
	,swapChildrenAt: function(index_1,index_2) {
		var child_1 = this.c_children[index_1];
		var child_2 = this.c_children[index_2];
		if(child_1 != null && child_2 != null) {
			this.c_children[index_1] = child_2;
			this.c_children[index_2] = child_1;
			return true;
		}
		return false;
	}
	,event_added: function() {
		if(this.isAdded) {
			return;
		} else {
			this.isAdded = true;
		}
		if(this.e_added != null) {
			this.e_added.dispatch(false,false);
		}
		var i = -1;
		while(++i < this.numChildren) this.c_children[i].event_added();
	}
	,event_removed: function() {
		if(this.isAdded) {
			this.isAdded = false;
		} else {
			return;
		}
		if(this.e_removed != null) {
			this.e_removed.dispatch(false,false);
		}
		var i = -1;
		while(++i < this.numChildren) this.c_children[i].event_removed();
	}
	,submit_touch: function(x,y,state) {
		if(!this.c_vis || !this.c_touchable) {
			return null;
		}
		this.c_mat.inv_transformCoords(x,y,this.pointer);
		if(this.c_vis_area != null && !this.c_vis_area.containsCoords(this.pointer.x,this.pointer.y)) {
			return null;
		}
		var child = null;
		var current = null;
		var i = this.numChildren;
		while(--i > -1) {
			current = this.c_children[i];
			child = current.submit_touch(this.pointer.x,this.pointer.y,state);
			if(child != null) {
				if(this.c_touchgroup) {
					return this;
				} else {
					return child;
				}
			}
		}
		return null;
	}
	,resize: function(w,h) {
		if(h == null) {
			h = 0.0;
		}
		if(w == null) {
			w = 0.0;
		}
		this.c_scaleX = w / this.c_w;
		this.c_scaleY = h / this.c_h;
		this.apply_transform();
	}
	,update_bounds: function() {
		this.bounds.set();
		this.c_w = this.c_h = 0;
		if(this.numChildren == 0) {
			return;
		} else if(this.numChildren == 1) {
			this.c_children[0].bounds.copy(this.bounds);
		} else {
			var i = -1;
			while(++i < this.numChildren) this.bounds.expand(this.c_children[i].bounds);
		}
		this.c_w = Math.round(this.bounds.w);
		this.c_h = Math.round(this.bounds.h);
		this.c_mat.transformRect(this.bounds);
	}
	,get_isTouchGroup: function() {
		return this.c_touchgroup;
	}
	,set_isTouchGroup: function(val) {
		if(!val && (this.isOver || this.isTouched)) {
			this.event_touch_out();
		}
		return this.c_touchgroup = val;
	}
	,set_w: function(val) {
		var scale = val / this.c_w;
		if(scale != this.c_scaleX) {
			this.c_scaleX = scale;
			this.apply_transform();
		}
		return val;
	}
	,set_h: function(val) {
		var scale = val / this.c_h;
		if(scale != this.c_scaleY) {
			this.c_scaleY = scale;
			this.apply_transform();
		}
		return val;
	}
	,__class__: DisplayContainer
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var FillRect = function(color,width,height,x,y,scaleX,scaleY,pivotX,pivotY) {
	if(pivotY == null) {
		pivotY = 0.0;
	}
	if(pivotX == null) {
		pivotX = 0.0;
	}
	if(scaleY == null) {
		scaleY = 1.0;
	}
	if(scaleX == null) {
		scaleX = 1.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	DisplayObject.call(this,x,y,scaleX,scaleY,pivotX,pivotY);
	this.c_color = color;
	this.resize(width,height);
};
FillRect.__name__ = ["FillRect"];
FillRect.__super__ = DisplayObject;
FillRect.prototype = $extend(DisplayObject.prototype,{
	draw: function(context) {
		if(this.c_w != 0 && this.c_h != 0) {
			context.drawRect(this.c_color,0,0,this.c_w,this.c_h);
		}
	}
	,__class__: FillRect
});
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = ["Main"];
Main.main = function() {
	App.start("drunkbunnymark",480,960,480,640);
	App.onStarted.on(Main.preload,0);
};
Main.preload = function() {
	Res.addTexture("assets","assets.png");
	Res.addTexture("font","font.png");
	Res.addString("font","font.fnt");
	Res.load(Main.precache);
};
Main.precache = function() {
	var bg = new FillRect(2302755,App.WIDTH,App.HEIGHT);
	App.root.addChild(bg);
	new byteware_format_FontFNT("font",Res.getTexture("font"),Res.getString("font"),true,true);
	Main.gfx = new byteware_graphics_Spritesheet();
	var source = Res.getTexture("assets").asset;
	Main.gfx.addTexture(source,"0_1",0,0,60,90,30,86);
	Main.gfx.addTexture(source,"0_0",60,0,60,90,30,86);
	Main.gfx.addTexture(source,"1_1",120,0,60,90,30,86);
	Main.gfx.addTexture(source,"1_0",180,0,60,90,30,86);
	Main.gfx.addTexture(source,"2_1",0,90,60,90,30,86);
	Main.gfx.addTexture(source,"2_0",60,90,60,90,30,86);
	Main.gfx.addTexture(source,"3_1",120,90,60,90,30,86);
	Main.gfx.addTexture(source,"3_0",180,90,60,90,30,86);
	App.ticker.add(Main.update);
	Main.resize();
	Main.addBunny();
};
Main.resize = function() {
	Main.min_x = App.LEFT + 30;
	Main.min_y = App.TOP + 86;
	Main.max_x = App.RIGHT - 30;
	Main.max_y = App.BOTTOM;
};
Main.update = function(delta) {
	var i = -1;
	while(++i < Main.num_buns) {
		var bunny = Main.buns[i];
		var bun_x = bunny.get_x();
		var bun_y = bunny.get_y();
		var is_hit = false;
		bun_x += bunny.speedX * delta;
		bun_y += bunny.speedY * delta;
		bunny.speedY += Main.gravity * delta;
		if(bun_x < Main.min_x) {
			bun_x = Main.min_x;
			bunny.speedX *= -1.0;
			var _g = bunny;
			_g.set_scaleX(_g.get_scaleX() * -1.0);
			is_hit = true;
		} else if(bun_x > Main.max_x) {
			bun_x = Main.max_x;
			bunny.speedX *= -1.0;
			var _g1 = bunny;
			_g1.set_scaleX(_g1.get_scaleX() * -1.0);
			is_hit = true;
		}
		if(bun_y < Main.min_y) {
			bun_y = Main.min_y;
			bunny.speedY = 0.0;
			is_hit = true;
		} else if(bun_y > Main.max_y) {
			bun_y = Main.max_y;
			bunny.speedY *= -1.0;
			is_hit = true;
		}
		bunny.pos(bun_x,bun_y);
		if(is_hit) {
			bunny.hit();
		}
	}
	Main.fps_elapsed += delta;
	Main.fps_current++;
	if(Main.fps_elapsed >= 1.0) {
		if(Main.fps_current >= Main.target_fps) {
			Main.fps_retries = 3;
			Main.is_adding_bunnies = true;
		} else {
			Main.fps_retries--;
			Main.is_adding_bunnies = false;
			if(Main.fps_retries <= 0) {
				Main.fps_retries = 3;
				Main.go_down();
			}
		}
		Main.fps_elapsed = 0.0;
		Main.fps_current = 0;
	}
	if(Main.is_adding_bunnies) {
		Main.addBunny();
	}
};
Main.addBunny = function() {
	var bunny = new Bunny(Main.min_x,Main.min_y);
	bunny.speedX = Math.random() * 150 + 200;
	bunny.speedY = Math.random() * 150;
	App.root.addChild(bunny);
	Main.buns[Main.num_buns++] = bunny;
};
Main.go_down = function() {
	Main.target_fps -= 5;
	Main.stats_fps.push(Main.num_buns);
	if(Main.target_fps < Main.MIN_FPS - 5) {
		Main.end_test();
	}
};
Main.end_test = function() {
	App.ticker.remove(Main.update);
	var i = Main.num_buns;
	while(--i > -1) App.root.removeChild(Main.buns[i]);
	Main.buns = [];
	var result = "TEST RESULTS:\n";
	var i1 = -1;
	var ii = Main.stats_fps.length;
	while(++i1 < ii) result += 60 - i1 * 5 + "fps : " + Main.stats_fps[i1] + "\n";
	var text = new TextField("font",result,400,400,Direction.CENTER,true,null,App.WIDTH * .5 - 200,App.HEIGHT * .5 - 200);
	App.root.addChild(text);
};
Math.__name__ = ["Math"];
var MathTools = function() { };
MathTools.__name__ = ["MathTools"];
MathTools.distf = function(x0,y0,x1,y1) {
	var a = x1 - x0;
	var b = y1 - y0;
	return Math.sqrt(a * a + b * b);
};
MathTools.rad = function(x0,y0,x1,y1) {
	return Math.atan2(y0 - y1,x0 - x1);
};
MathTools.deg = function(x0,y0,x1,y1) {
	return Math.atan2(y0 - y1,x0 - x1) * 180.0 / 3.141592653589793;
};
MathTools.normalize_rad = function(angle) {
	angle %= 6.28318530718;
	if(angle < -3.1415926535897931) {
		angle += 6.28318530718;
	}
	if(angle > 3.141592653589793) {
		angle -= 6.28318530718;
	}
	return angle;
};
MathTools.normalize_deg = function(angle) {
	angle %= 360.0;
	if(angle < 0) {
		angle += 360.0;
	}
	if(angle > 360.0) {
		angle -= 360.0;
	}
	return angle;
};
MathTools.rad2deg = function(angle) {
	return angle * 180.0 / 3.141592653589793;
};
MathTools.deg2rad = function(angle) {
	return angle * 3.141592653589793 / 180.0;
};
MathTools.absf = function(a) {
	if(a < 0.0) {
		return -a;
	} else {
		return a;
	}
};
MathTools.difff = function(a,b) {
	if(a > b) {
		return a - b;
	} else {
		return b - a;
	}
};
MathTools.clampf = function(a,min,max) {
	if(a < min) {
		return min;
	} else if(a > max) {
		return max;
	} else {
		return a;
	}
};
MathTools.isEvenf = function(a) {
	return a % 2 == 0;
};
MathTools.isOddf = function(a) {
	return a % 2 != 0;
};
MathTools.absi = function(a) {
	if(a < 0) {
		return -a;
	} else {
		return a;
	}
};
MathTools.diffi = function(a,b) {
	if(a > b) {
		return a - b;
	} else {
		return b - a;
	}
};
MathTools.clampi = function(a,min,max) {
	if(a < min) {
		return min;
	} else if(a > max) {
		return max;
	} else {
		return a;
	}
};
MathTools.isEveni = function(a) {
	return (a & 1) == 0;
};
MathTools.isOddi = function(a) {
	return (a & 1) != 0;
};
MathTools.isPow2 = function(a) {
	if(a > 0) {
		return (a & a - 1) == 0;
	} else {
		return false;
	}
};
MathTools.nextPow2 = function(a) {
	var b = a - 1;
	b |= b >> 1;
	b |= b >> 2;
	b |= b >> 4;
	b |= b >> 8;
	b |= b >> 16;
	return b + 1;
};
MathTools.min2f = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
MathTools.max2f = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
MathTools.min3f = function(a,b,c) {
	if(a < b) {
		if(a < c) {
			return a;
		} else {
			return c;
		}
	} else if(b < c) {
		return b;
	} else {
		return c;
	}
};
MathTools.max3f = function(a,b,c) {
	if(a > b) {
		if(a > c) {
			return a;
		} else {
			return c;
		}
	} else if(b > c) {
		return b;
	} else {
		return c;
	}
};
MathTools.min4f = function(a,b,c,d) {
	var e = a < b ? a : b;
	var f = c < d ? c : d;
	if(e < f) {
		return e;
	} else {
		return f;
	}
};
MathTools.max4f = function(a,b,c,d) {
	var e = a > b ? a : b;
	var f = c > d ? c : d;
	if(e > f) {
		return e;
	} else {
		return f;
	}
};
MathTools.min2i = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
MathTools.max2i = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
MathTools.min3i = function(a,b,c) {
	if(a < b) {
		if(a < c) {
			return a;
		} else {
			return c;
		}
	} else if(b < c) {
		return b;
	} else {
		return c;
	}
};
MathTools.max3i = function(a,b,c) {
	if(a > b) {
		if(a > c) {
			return a;
		} else {
			return c;
		}
	} else if(b > c) {
		return b;
	} else {
		return c;
	}
};
MathTools.min4i = function(a,b,c,d) {
	var e = a < b ? a : b;
	var f = c < d ? c : d;
	if(e < f) {
		return e;
	} else {
		return f;
	}
};
MathTools.max4i = function(a,b,c,d) {
	var e = a > b ? a : b;
	var f = c > d ? c : d;
	if(e > f) {
		return e;
	} else {
		return f;
	}
};
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var ReflectTools = function() { };
ReflectTools.__name__ = ["ReflectTools"];
ReflectTools.call = function(method,args) {
	if(method == null) {
		return false;
	}
	method.apply(method,args);
	return true;
};
ReflectTools.hasField = function(object,field) {
	if(Object.prototype.hasOwnProperty.call(object,field)) {
		return !(object.__properties__ && object.__properties__["set_" + field]);
	} else {
		return false;
	}
};
var Res = function() { };
Res.__name__ = ["Res"];
Res.create_asset_pack = function(name) {
	if(name == null) {
		name = "default";
	}
	var _this = Res.g_base_packs;
	var assetPack = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(assetPack == null) {
		assetPack = new byteware_assets_AssetPack(name);
		var _this1 = Res.g_base_packs;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,assetPack);
		} else {
			_this1.h[name] = assetPack;
		}
	}
	return assetPack;
};
Res.create_asset = function(name,path,type,pack,remove) {
	var assetPack = Res.create_asset_pack(pack);
	var assetInfo = new byteware_assets_AssetInfo(name,path,type);
	assetInfo.flag_remove_entry = remove;
	assetPack.add(assetInfo);
};
Res.load = function(onComplete,onProgress) {
	var key = Res.g_base_packs.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var _this = Res.g_base_packs;
		(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]).load_assets(null);
	}
	return App.platform.get_loader().start(onComplete,onProgress);
};
Res.loadAssetPack = function(name,onComplete,onProgress) {
	var _this = Res.g_base_packs;
	var assetPack = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(assetPack != null) {
		assetPack.load_assets(null);
	}
	return App.platform.get_loader().start(onComplete,onProgress);
};
Res.loadAssetPacks = function(names,onComplete,onProgress) {
	var i = -1;
	var ii = names.length;
	while(++i < ii) {
		var _this = Res.g_base_packs;
		var key = names[i];
		var assetPack = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(assetPack != null) {
			assetPack.load_assets(null);
		}
	}
	return App.platform.get_loader().start(onComplete,onProgress);
};
Res.getAssetPack = function(name) {
	var _this = Res.g_base_packs;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
Res.getAssetPacks = function(names) {
	var result = [];
	var i = -1;
	var ii = names.length;
	while(++i < ii) {
		var _this = Res.g_base_packs;
		var key = names[i];
		var assetPack = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(assetPack != null) {
			result.push(assetPack);
		}
	}
	return result;
};
Res.removeAssetPack = function(name) {
	var _this = Res.g_base_packs;
	var assetPack = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(assetPack == null) {
		return false;
	} else {
		assetPack.dispose();
		Res.g_base_packs.remove(name);
	}
	return true;
};
Res.removeAssetPacks = function(names) {
	var result = true;
	var i = -1;
	var ii = names.length;
	while(++i < ii) if(!Res.removeAssetPack(names[i])) {
		result = false;
	}
	return result;
};
Res.addTexture = function(name,path,asset_pack) {
	var _this = Res.g_base_textures;
	var prev = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(prev != null && prev.info != null && prev.info.path == path) {
		return false;
	}
	Res.create_asset(name,path,byteware_assets_AssetType.TEXTURE,asset_pack,false);
	return true;
};
Res.getTexture = function(name) {
	var _this = Res.g_base_textures;
	var textureAsset = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(textureAsset == null) {
		return null;
	} else {
		return textureAsset.texture;
	}
};
Res.setTexture = function(name,asset,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	var _this = Res.g_base_textures;
	var prev = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(prev != null) {
		if(overwrite) {
			Res.removeTexture(name,true);
		} else {
			return false;
		}
	}
	var _this1 = Res.g_base_textures;
	if(__map_reserved[name] != null) {
		_this1.setReserved(name,asset);
	} else {
		_this1.h[name] = asset;
	}
	if(asset.info != null) {
		asset.info.name = name;
	}
	return true;
};
Res.removeTexture = function(name,dispose) {
	if(dispose == null) {
		dispose = true;
	}
	var _this = Res.g_base_textures;
	var textureAsset = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(textureAsset != null && dispose) {
		textureAsset.dispose();
	}
	return Res.g_base_textures.remove(name);
};
Res.addString = function(name,path,asset_pack,remove_entry,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(remove_entry == null) {
		remove_entry = true;
	}
	var tmp;
	var _this = Res.g_base_strings;
	if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null) {
		tmp = !overwrite;
	} else {
		tmp = false;
	}
	if(tmp) {
		return false;
	}
	Res.create_asset(name,path,byteware_assets_AssetType.STRING,asset_pack,remove_entry);
	return true;
};
Res.getString = function(name,remove) {
	if(remove == null) {
		remove = true;
	}
	var _this = Res.g_base_strings;
	var stringAsset = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(remove) {
		Res.g_base_strings.remove(name);
	}
	return stringAsset;
};
Res.setString = function(name,content,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	var tmp;
	if(!overwrite) {
		var _this = Res.g_base_strings;
		tmp = (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		return false;
	}
	var _this1 = Res.g_base_strings;
	if(__map_reserved[name] != null) {
		_this1.setReserved(name,content);
	} else {
		_this1.h[name] = content;
	}
	return true;
};
Res.removeString = function(name) {
	return Res.g_base_strings.remove(name);
};
Res.addSound = function(name,path,asset_pack) {
	var _this = Res.g_base_sounds;
	var prev = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(prev != null && prev.info != null && prev.info.path == path) {
		return false;
	}
	Res.create_asset(name,path,byteware_assets_AssetType.SOUND,asset_pack,false);
	return true;
};
Res.getSound = function(name) {
	var _this = Res.g_base_sounds;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
Res.setSound = function(name,asset,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	var _this = Res.g_base_sounds;
	var prev = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(prev != null) {
		if(overwrite) {
			Res.removeSound(name,true);
		} else {
			return false;
		}
	}
	var _this1 = Res.g_base_sounds;
	if(__map_reserved[name] != null) {
		_this1.setReserved(name,asset);
	} else {
		_this1.h[name] = asset;
	}
	if(asset.info != null) {
		asset.info.name = name;
	}
	return true;
};
Res.removeSound = function(name,dispose) {
	if(dispose == null) {
		dispose = true;
	}
	var _this = Res.g_base_sounds;
	var soundAsset = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(soundAsset != null && dispose) {
		soundAsset.dispose();
	}
	return Res.g_base_sounds.remove(name);
};
var SFX = function() { };
SFX.__name__ = ["SFX"];
SFX.createMixerChannel = function(name,global,multi_sample) {
	if(multi_sample == null) {
		multi_sample = true;
	}
	if(global == null) {
		global = false;
	}
	if(name == null) {
		name = "channel";
	}
	var valid_name = name;
	var valid_from = 1;
	var validator = function(channel_name) {
		var i = -1;
		while(++i < SFX.numChannels) if(SFX.g_base_channels[i].name == channel_name) {
			return false;
		}
		return true;
	};
	while(!validator(valid_name)) valid_name = name + valid_from++;
	var id = SFX.numChannels++;
	var mixerChannel = multi_sample ? new byteware_media_MixerChannel(valid_name,global) : new byteware_media_SingleTrackChannel(valid_name,global);
	mixerChannel.id = id;
	SFX.g_base_channels[id] = mixerChannel;
	return id;
};
SFX.getMixerChannelAt = function(id) {
	return SFX.g_base_channels[id];
};
SFX.getMixerChannel = function(name) {
	var mixerChannel = null;
	var i = -1;
	while(++i < SFX.numChannels) {
		mixerChannel = SFX.g_base_channels[i];
		if(mixerChannel.name == name) {
			return mixerChannel;
		}
	}
	return null;
};
SFX.stopMixerChannelAt = function(id) {
	var mixerChannel = SFX.g_base_channels[id];
	if(mixerChannel == null) {
		return false;
	} else {
		mixerChannel.stop();
	}
	return true;
};
SFX.stopMixerChannelsAt = function(from,to) {
	if(from == null) {
		from = 0;
	}
	if(from < 0) {
		from = 0;
	}
	if(to == null || to >= SFX.numChannels) {
		to = SFX.numChannels - 1;
	}
	while(from <= to) {
		SFX.g_base_channels[from].stop();
		++from;
	}
};
SFX.stopMixerChannel = function(name) {
	var mixerChannel = SFX.getMixerChannel(name);
	if(mixerChannel == null) {
		return false;
	} else {
		mixerChannel.stop();
	}
	return true;
};
SFX.play = function(name,vol,loop,channel,onComplete,onCompleteArgs) {
	if(channel == null) {
		channel = 1;
	}
	if(loop == null) {
		loop = false;
	}
	if(vol == null) {
		vol = 1.0;
	}
	var _this = SFX.g_base_sounds;
	var sound = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	var mixerChannel = channel < 0 || channel >= SFX.numChannels ? SFX.g_base_channels[1] : SFX.g_base_channels[channel];
	return mixerChannel.play(sound,vol,loop,onComplete,onCompleteArgs);
};
SFX.playTrack = function(track,vol,loop,channel,onComplete,onCompleteArgs) {
	if(channel == null) {
		channel = 2;
	}
	if(loop == null) {
		loop = true;
	}
	if(vol == null) {
		vol = 1.0;
	}
	return SFX.play(track,vol,loop,channel,onComplete,onCompleteArgs);
};
SFX.stopTrack = function() {
	SFX.g_base_channels[2].stop();
};
SFX.init = function() {
	SFX.g_base_channels = [];
	SFX.g_base_volume = new haxe_ds_StringMap();
	SFX.g_base_sounds = Res.g_base_sounds;
	SFX.createMixerChannel("master",true,true);
	SFX.createMixerChannel("sound",false,true);
	SFX.createMixerChannel("music",false,false);
};
SFX.event_activate = function(state) {
	var i = -1;
	while(++i < SFX.numChannels) SFX.g_base_channels[i].event_activate(state);
};
SFX.event_pause = function(state) {
	var i = -1;
	while(++i < SFX.numChannels) {
		var mixerChannel = SFX.g_base_channels[i];
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var TextField = function(font,text,width,height,align,global,custom_ticker,x,y,scaleX,scaleY,pivotX,pivotY) {
	if(pivotY == null) {
		pivotY = 0.0;
	}
	if(pivotX == null) {
		pivotX = 0.0;
	}
	if(scaleY == null) {
		scaleY = 1.0;
	}
	if(scaleX == null) {
		scaleX = 1.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	if(global == null) {
		global = false;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	DisplayObject.call(this,x,y,scaleX,scaleY,pivotX,pivotY);
	this.c_font = byteware_graphics_Font.getFont(font);
	this.c_text = text;
	this.c_align = align == null ? Direction.UP_LEFT : align;
	this.c_hor_space = this.c_ver_space = this.c_vert_offset = 0.0;
	this.c_wrapping = true;
	this.c_offset_x = this.c_offset_y = 2.0;
	this.c_changed = text != null;
	this.c_font_size = this.c_font == null ? 0.0 : this.c_font.size;
	this.c_w = width;
	this.c_h = height;
	this.textBounds = new byteware_geom_Rect();
	this.numChars = this.numGlyphs = this.numLines = 0;
	this.update_layout();
};
TextField.__name__ = ["TextField"];
TextField.__super__ = DisplayObject;
TextField.prototype = $extend(DisplayObject.prototype,{
	offset: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.c_offset_x = x;
		this.c_offset_y = y;
		this.event_text_change();
	}
	,spaces: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.c_hor_space = x;
		this.c_ver_space = y;
		this.event_text_change();
	}
	,draw: function(context) {
		if(this.c_font == null) {
			return;
		}
		if(this.c_changed) {
			this.update_layout();
		}
		context.save();
		context.scale(this.c_context_scale,this.c_context_scale);
		var curr_y = this.c_vert_offset;
		var i = -1;
		var ii = this.c_glyphs.length;
		while(++i < ii) {
			var glyph = this.c_glyphs[i];
			if(glyph.charCode == 10) {
				curr_y += this.c_line_offset;
			} else {
				glyph.draw(context,this.c_offsets[i],curr_y);
			}
		}
		context.restore();
	}
	,event_text_change: function() {
		this.c_changed = true;
		this.event_vischange();
	}
	,update_layout: function() {
		var _gthis = this;
		this.c_changed = false;
		this.c_glyphs = [];
		this.c_offsets = [];
		this.numLines = 0;
		if(this.c_text == null || this.c_font == null) {
			return;
		}
		this.c_context_scale = this.c_font_size / this.c_font.size;
		var inv_scale = 1.0 / this.c_context_scale;
		var scaled_offset_x = this.c_offset_x * inv_scale;
		var scaled_offset_y = this.c_offset_y * inv_scale;
		var scaled_max_x = this.c_w * inv_scale - scaled_offset_x;
		var scaled_max_y = this.c_h * inv_scale - scaled_offset_y;
		var i = -1;
		var ii = this.c_text.length;
		while(++i < ii) {
			var glyph = this.c_font.getGlyph(HxOverrides.cca(this.c_text,i));
			if(glyph != null) {
				this.c_glyphs.push(glyph);
			}
		}
		this.c_line_offset = this.c_font.lineHeight + this.c_ver_space;
		var code_newline = 10;
		var code_space = 10;
		var line_widths = [];
		var last_space_id = -1;
		var curr_width = scaled_offset_x;
		var curr_height = 0.0;
		var newline = this.c_font.getGlyph(code_newline);
		var addLine = function() {
			var a = _gthis.textBounds.w;
			_gthis.textBounds.w = a > curr_width ? a : curr_width;
			_gthis.textBounds.h += curr_height;
			line_widths[_gthis.numLines++] = curr_width;
			curr_width = scaled_offset_x;
			curr_height = 0.0;
		};
		i = -1;
		ii = this.c_glyphs.length;
		while(++i < ii) {
			var glyph1 = this.c_glyphs[i];
			this.c_offsets[i] = curr_width;
			var should_wrap = this.c_wrapping && this.c_w > 0 && curr_width + glyph1.w > scaled_max_x;
			if(should_wrap || glyph1 == newline) {
				if(should_wrap) {
					if(last_space_id != -1) {
						this.c_glyphs[last_space_id] = newline;
						curr_width = this.c_offsets[last_space_id];
						i = last_space_id;
					} else {
						this.c_glyphs.splice(i,0,newline);
					}
				}
				last_space_id = -1;
				curr_height = this.c_line_offset;
				addLine();
			} else {
				if(glyph1.charCode == code_space) {
					last_space_id = i;
				}
				curr_width += glyph1.advance + this.c_hor_space;
				var b = glyph1.h + glyph1.offsetY;
				if(curr_height > b) {
					curr_height = curr_height;
				} else {
					curr_height = b;
				}
				if(i + 1 < ii) {
					var next = this.c_glyphs[i + 1];
					curr_width += glyph1.getKerning(next.charCode);
				}
			}
		}
		addLine();
		var getAlignX = function(line_width) {
			var _g = _gthis.c_align;
			switch(_g[1]) {
			case 0:case 1:case 4:
				return (scaled_max_x - line_width) * .5;
			case 3:case 6:case 8:
				return scaled_max_x - line_width;
			default:
				return 0.0;
			}
		};
		var getAlignY = function(text_height) {
			var _g1 = _gthis.c_align;
			switch(_g1[1]) {
			case 2:case 3:case 4:
				return (scaled_max_y - text_height + scaled_max_y) * .5;
			case 1:case 7:case 8:
				return scaled_max_y - text_height;
			default:
				return scaled_offset_y;
			}
		};
		var line_y = 0.0;
		var align_offset_x = getAlignX(line_widths[0]);
		var top = 1.79769313486231e+308;
		var bottom = -1.79769313486231e+308;
		var line = 0;
		i = -1;
		ii = this.c_glyphs.length;
		while(++i < ii) {
			var glyph2 = this.c_glyphs[i];
			if(glyph2 == newline) {
				line_y += this.c_line_offset;
				align_offset_x = getAlignX(line_widths[++line]);
			}
			this.c_offsets[i] += align_offset_x;
			var glyph_y = line_y + glyph2.offsetY;
			if(top < glyph_y) {
				top = top;
			} else {
				top = glyph_y;
			}
			var b1 = glyph_y + glyph2.h;
			if(bottom > b1) {
				bottom = bottom;
			} else {
				bottom = b1;
			}
		}
	}
	,get_w: function() {
		return this.c_w;
	}
	,set_w: function(val) {
		var width = val | 0;
		if(width != this.c_w) {
			this.c_w = width;
			this.update_bounds();
			this.event_text_change();
			this.event_transform();
		}
		return val;
	}
	,get_h: function() {
		return this.c_h;
	}
	,set_h: function(val) {
		var height = val | 0;
		if(height != this.c_h) {
			this.c_h = height;
			this.update_bounds();
			this.event_text_change();
			this.event_transform();
		}
		return val;
	}
	,get_font: function() {
		if(this.c_font == null) {
			return null;
		} else {
			return this.c_font.name;
		}
	}
	,set_font: function(val) {
		var font = byteware_graphics_Font.getFont(val);
		if(font != null && font != this.c_font) {
			this.c_font = font;
			this.event_text_change();
		}
		return val;
	}
	,get_text: function() {
		return this.c_text;
	}
	,set_text: function(val) {
		if(this.c_text != val) {
			this.c_text = val;
			this.event_text_change();
		}
		return val;
	}
	,get_align: function() {
		return this.c_align;
	}
	,set_align: function(val) {
		if(val == null) {
			val = Direction.UP_LEFT;
		}
		if(val != this.c_align) {
			this.c_align = val;
			this.event_text_change();
		}
		return val;
	}
	,get_horSpace: function() {
		return this.c_hor_space;
	}
	,set_horSpace: function(val) {
		if(val != this.c_hor_space) {
			this.c_hor_space = val;
			this.event_text_change();
		}
		return val;
	}
	,get_verSpace: function() {
		return this.c_ver_space;
	}
	,set_verSpace: function(val) {
		if(val != this.c_ver_space) {
			this.c_ver_space = val;
			this.event_text_change();
		}
		return val;
	}
	,get_size: function() {
		return this.c_font_size;
	}
	,set_size: function(val) {
		if(val < 2.0) {
			val = 2.0;
		}
		if(val != this.c_font_size) {
			this.c_font_size = val;
			this.event_text_change();
		}
		return val;
	}
	,get_isWrappingEnabled: function() {
		return this.c_wrapping;
	}
	,set_isWrappingEnabled: function(val) {
		if(val != this.c_wrapping) {
			this.c_wrapping = val;
			this.event_text_change();
		}
		return val;
	}
	,get_offsetX: function() {
		return this.c_offset_x;
	}
	,set_offsetX: function(val) {
		if(val != this.c_offset_x) {
			this.c_offset_x = val;
			this.event_text_change();
		}
		return val;
	}
	,get_offsetY: function() {
		return this.c_offset_y;
	}
	,set_offsetY: function(val) {
		if(val != this.c_offset_y) {
			this.c_offset_y = val;
			this.event_text_change();
		}
		return val;
	}
	,__class__: TextField
});
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var byteware_RootContainer = function(w,h) {
	DisplayContainer.call(this);
	this.root_w = w;
	this.root_h = h;
};
byteware_RootContainer.__name__ = ["byteware","RootContainer"];
byteware_RootContainer.__super__ = DisplayContainer;
byteware_RootContainer.prototype = $extend(DisplayContainer.prototype,{
	render: function(context,offsetX,offsetY) {
		context.save();
		var e = Math.round(this.c_mat.e);
		var f = Math.round(this.c_mat.f);
		context.transform(this.c_mat.a,this.c_mat.b,this.c_mat.c,this.c_mat.d,e + offsetX,f + offsetY);
		context.crop(0,0,this.root_w,this.root_h);
		var i = -1;
		while(++i < this.numChildren) this.c_children[i].render(context,0,0);
		context.restore();
	}
	,submitTouch: function(id,x,y,state) {
		this.c_mat.inv_transformCoords(x,y,this.pointer);
		var object = null;
		var i = this.numChildren;
		while(--i > -1) {
			object = this.c_children[i].submit_touch(this.pointer.x,this.pointer.y,state);
			if(object != null) {
				break;
			}
		}
		switch(state[1]) {
		case 0:
			if(object != null) {
				object.event_touch_begin();
			}
			this.event_touch_begin();
			break;
		case 1:
			if(object != null) {
				object.event_touch_move();
			}
			this.event_touch_move();
			break;
		case 2:
			if(object != null) {
				object.event_touch_over();
			}
			this.event_touch_over();
			break;
		case 3:
			if(object != null) {
				object.event_touch_end();
			}
			this.event_touch_end();
			break;
		}
		return true;
	}
	,addChildAt: function(child,index) {
		if(index < 0) {
			index = 0;
		} else if(index > this.numChildren) {
			index = this.numChildren;
		}
		if(child.parent == this) {
			this.setChildIndex(child,index);
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.c_children.splice(index,0,child);
			child.parent = this;
			this.numChildren++;
			child.event_added();
			this.update_bounds();
			this.event_vischange();
		}
		return child;
	}
	,__class__: byteware_RootContainer
});
var byteware_Ticker = function(global,disposable) {
	if(disposable == null) {
		disposable = true;
	}
	if(global == null) {
		global = false;
	}
	this.isGlobal = global;
	this.isDisposable = disposable;
	this.delta = 0.0;
	this.c_coef = 1.0;
	this.clear();
	this.c_paused = this.c_manual = false;
	byteware_Ticker.g_base[byteware_Ticker.numTickers++] = this;
};
byteware_Ticker.__name__ = ["byteware","Ticker"];
byteware_Ticker.event_update = function() {
	byteware_Ticker.g_curr = new Date().getTime() / 1000;
	byteware_Ticker.globalDelta = ((byteware_Ticker.g_curr - byteware_Ticker.g_prev) * 1000 | 0) * .001 * byteware_Ticker.g_coef;
	byteware_Ticker.g_prev = byteware_Ticker.g_curr;
	if(byteware_Ticker.globalDelta < 0.0 || byteware_Ticker.globalDelta > 1.0) {
		byteware_Ticker.globalDelta = 0.0;
	}
	var i = -1;
	while(++i < byteware_Ticker.numTickers) byteware_Ticker.g_base[i].update();
};
byteware_Ticker.event_pause = function(state) {
	if(state) {
		var i = -1;
		while(++i < byteware_Ticker.numTickers) {
			var ticker = byteware_Ticker.g_base[i];
			if(!ticker.isGlobal) {
				ticker.c_paused = true;
			}
		}
	} else {
		var i1 = -1;
		while(++i1 < byteware_Ticker.numTickers) {
			var ticker1 = byteware_Ticker.g_base[i1];
			ticker1.c_paused = ticker1.c_manual;
		}
	}
};
byteware_Ticker.event_clear = function() {
	var i = byteware_Ticker.numTickers;
	while(--i > -1) {
		var ticker = byteware_Ticker.g_base[i];
		if(ticker.isDisposable) {
			ticker.dispose();
		}
	}
};
byteware_Ticker.normalize = function() {
	byteware_Ticker.g_curr = byteware_Ticker.g_prev = new Date().getTime() / 1000;
};
byteware_Ticker.get_globalScale = function() {
	return byteware_Ticker.g_coef;
};
byteware_Ticker.set_globalScale = function(val) {
	if(val < 0.0) {
		val *= -1.0;
	}
	return byteware_Ticker.g_coef = val;
};
byteware_Ticker.prototype = {
	add: function(func) {
		var valid = this.c_base.indexOf(func) == -1;
		if(valid) {
			this.c_base[this.numFunctions++] = func;
		}
		return valid;
	}
	,remove: function(func) {
		var i = this.c_base.indexOf(func);
		if(i != -1) {
			this.c_base.splice(i,1);
			this.numFunctions--;
			return true;
		}
		return false;
	}
	,clear: function() {
		if(this.numFunctions <= 0) {
			return false;
		}
		this.c_base = [];
		this.numFunctions = 0;
		return true;
	}
	,dispose: function() {
		var i = byteware_Ticker.g_base.indexOf(this);
		if(i != -1) {
			byteware_Ticker.g_base.splice(i,1);
			byteware_Ticker.numTickers--;
			this.c_base = null;
			this.numFunctions = -1;
		}
	}
	,update: function() {
		this.delta = byteware_Ticker.globalDelta * this.c_coef;
		if(!this.c_paused) {
			var i = -1;
			while(++i < this.numFunctions) this.c_base[i](this.delta);
		}
	}
	,get_isPaused: function() {
		return this.c_manual;
	}
	,set_isPaused: function(val) {
		return this.c_paused = this.c_manual = val;
	}
	,get_scale: function() {
		return this.c_coef;
	}
	,set_scale: function(val) {
		if(val < 0.0) {
			val *= -1.0;
		}
		return this.c_coef = val;
	}
	,__class__: byteware_Ticker
};
var byteware_assets_Asset = function() {
	this.isLoaded = false;
};
byteware_assets_Asset.__name__ = ["byteware","assets","Asset"];
byteware_assets_Asset.prototype = {
	upload: function(data) {
		return false;
	}
	,reload: function() {
		if(this.info == null) {
			return false;
		} else {
			App.platform.get_loader().add(this.info);
		}
		return true;
	}
	,unload: function() {
		return false;
	}
	,dispose: function() {
		if(this.e_dispose != null) {
			this.e_dispose.dispatch(false,false);
		}
		this.unload();
		if(this.info != null) {
			this.info.pack.remove(this.info);
			this.info.root = null;
			this.info = null;
		}
		this.e_reloaded = null;
		this.e_dispose = null;
	}
	,get_onReloaded: function() {
		if(this.e_reloaded == null) {
			this.e_reloaded = new tofu_events_Event0(false,false);
		}
		return this.e_reloaded;
	}
	,get_onDispose: function() {
		if(this.e_dispose == null) {
			this.e_dispose = new tofu_events_Event0(false,false);
		}
		return this.e_dispose;
	}
	,__class__: byteware_assets_Asset
};
var byteware_assets_AssetInfo = function(asset_name,asset_path,asset_type) {
	this.name = asset_name;
	this.path = asset_path;
	this.type = asset_type;
	this.pack = null;
	this.root = null;
	this.flag_remove_entry = false;
};
byteware_assets_AssetInfo.__name__ = ["byteware","assets","AssetInfo"];
byteware_assets_AssetInfo.prototype = {
	__class__: byteware_assets_AssetInfo
};
var byteware_assets_AssetPack = function(pack_name) {
	this.name = pack_name;
	this.numAssets = 0;
	this.c_base = [];
};
byteware_assets_AssetPack.__name__ = ["byteware","assets","AssetPack"];
byteware_assets_AssetPack.prototype = {
	dispose: function() {
		this.unload_assets(null);
		this.c_base = null;
		this.numAssets = -1;
	}
	,add: function(info) {
		if(this.c_base.indexOf(info) == -1) {
			if(info.pack != null) {
				info.pack.remove(info);
			}
			this.c_base[this.numAssets++] = info;
			info.pack = this;
			return true;
		}
		return false;
	}
	,get: function(name,type) {
		var i = -1;
		while(++i < this.numAssets) {
			var info = this.c_base[i];
			if(info.name == name && info.type == type) {
				return info;
			}
		}
		return null;
	}
	,exists: function(name,type) {
		return this.get(name,type) != null;
	}
	,remove: function(info) {
		var i = this.c_base.indexOf(info);
		if(i != -1) {
			info.pack = null;
			this.c_base.splice(i,1);
			this.numAssets--;
			return true;
		}
		return false;
	}
	,removeTextures: function() {
		return this.remove_assets(byteware_assets_AssetType.TEXTURE);
	}
	,removeStrings: function() {
		return this.remove_assets(byteware_assets_AssetType.STRING);
	}
	,removeSounds: function() {
		return this.remove_assets(byteware_assets_AssetType.SOUND);
	}
	,removeAll: function() {
		return this.remove_assets(null);
	}
	,loadAll: function() {
		return this.load_assets(null);
	}
	,loadTextures: function() {
		return this.load_assets(byteware_assets_AssetType.TEXTURE);
	}
	,loadStrings: function() {
		return this.load_assets(byteware_assets_AssetType.STRING);
	}
	,loadSounds: function() {
		return this.load_assets(byteware_assets_AssetType.SOUND);
	}
	,reloadAll: function() {
		return this.reload_assets(null);
	}
	,reloadTextures: function() {
		return this.reload_assets(byteware_assets_AssetType.TEXTURE);
	}
	,reloadStrings: function() {
		return this.load_assets(byteware_assets_AssetType.STRING);
	}
	,reloadSounds: function() {
		return this.reload_assets(byteware_assets_AssetType.SOUND);
	}
	,unloadAll: function() {
		return this.unload_assets(null);
	}
	,unloadTextures: function() {
		return this.unload_assets(byteware_assets_AssetType.TEXTURE);
	}
	,unloadSounds: function() {
		return this.unload_assets(byteware_assets_AssetType.SOUND);
	}
	,remove_assets: function(type) {
		var result = false;
		var i = this.numAssets;
		while(--i > -1) {
			var info = this.c_base[i];
			if(type == null || type == info.type) {
				switch(type[1]) {
				case 0:
					break;
				case 1:
					Res.removeString(info.name);
					break;
				case 2:
					break;
				}
				this.remove(info);
			}
		}
		return result;
	}
	,load_assets: function(type) {
		var result = false;
		var i = -1;
		while(++i < this.numAssets) {
			var info = this.c_base[i];
			if(type == null || type == info.type) {
				if(info.root == null || !info.root.isLoaded) {
					App.platform.get_loader().add(info);
					result = true;
				}
			}
		}
		return result;
	}
	,reload_assets: function(type) {
		var result = false;
		var i = -1;
		while(++i < this.numAssets) {
			var info = this.c_base[i];
			if(type == null || type == info.type) {
				if(info.root != null && info.root.isLoaded) {
					App.platform.get_loader().add(info);
					result = true;
				}
			}
		}
		return result;
	}
	,unload_assets: function(type) {
		var result = false;
		var i = -1;
		while(++i < this.numAssets) {
			var info = this.c_base[i];
			if(info.root != null && info.root.unload()) {
				result = true;
			}
		}
		return result;
	}
	,get_isLoaded: function() {
		return this.get_numLoaded() == this.numAssets;
	}
	,get_numLoaded: function() {
		var result = 0;
		var i = -1;
		while(++i < this.numAssets) {
			var info = this.c_base[i];
			if(info.root != null && info.root.isLoaded) {
				++result;
			}
		}
		return result;
	}
	,__class__: byteware_assets_AssetPack
};
var byteware_assets_AssetType = { __ename__ : true, __constructs__ : ["TEXTURE","STRING","SOUND"] };
byteware_assets_AssetType.TEXTURE = ["TEXTURE",0];
byteware_assets_AssetType.TEXTURE.__enum__ = byteware_assets_AssetType;
byteware_assets_AssetType.STRING = ["STRING",1];
byteware_assets_AssetType.STRING.__enum__ = byteware_assets_AssetType;
byteware_assets_AssetType.SOUND = ["SOUND",2];
byteware_assets_AssetType.SOUND.__enum__ = byteware_assets_AssetType;
var byteware_graphics_Font = function(font_name,font_texture,make_default,register_font) {
	if(register_font == null) {
		register_font = true;
	}
	if(make_default == null) {
		make_default = false;
	}
	this.name = font_name;
	this.texture = font_texture;
	this.size = this.lineHeight = 0;
	this.c_glyphs = new haxe_ds_IntMap();
	var code_newline = 10;
	var newline = new byteware_graphics_Glyph(code_newline);
	this.c_glyphs.h[code_newline] = newline;
	if(register_font) {
		byteware_graphics_Font.registerFont(this,make_default,true);
	}
};
byteware_graphics_Font.__name__ = ["byteware","graphics","Font"];
byteware_graphics_Font.registerFont = function(font,make_default,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(make_default == null) {
		make_default = false;
	}
	if(byteware_graphics_Font.g_font_base == null) {
		byteware_graphics_Font.g_font_base = new haxe_ds_StringMap();
		make_default = true;
	}
	var name = font.name;
	var _this = byteware_graphics_Font.g_font_base;
	var prev = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(prev != null) {
		if(overwrite) {
			byteware_graphics_Font.removeFont(name,true);
		} else {
			return false;
		}
	}
	var _this1 = byteware_graphics_Font.g_font_base;
	if(__map_reserved[name] != null) {
		_this1.setReserved(name,font);
	} else {
		_this1.h[name] = font;
	}
	byteware_graphics_Font.numFonts++;
	if(make_default) {
		byteware_graphics_Font.defaultFont = font;
	}
	return true;
};
byteware_graphics_Font.removeFont = function(name,dispose) {
	if(dispose == null) {
		dispose = true;
	}
	var tmp;
	if(byteware_graphics_Font.g_font_base != null) {
		var _this = byteware_graphics_Font.g_font_base;
		tmp = (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null;
	} else {
		tmp = true;
	}
	if(tmp) {
		return false;
	}
	var isDefault = byteware_graphics_Font.defaultFont.name == name;
	if(dispose) {
		var _this1 = byteware_graphics_Font.g_font_base;
		(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).dispose();
	}
	byteware_graphics_Font.g_font_base.remove(name);
	byteware_graphics_Font.numFonts--;
	if(isDefault) {
		if(byteware_graphics_Font.numFonts == 0) {
			byteware_graphics_Font.defaultFont = null;
		} else {
			var key = byteware_graphics_Font.g_font_base.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				var _this2 = byteware_graphics_Font.g_font_base;
				byteware_graphics_Font.defaultFont = __map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1];
				break;
			}
		}
	}
	return true;
};
byteware_graphics_Font.makeDefault = function(name) {
	var tmp;
	if(byteware_graphics_Font.g_font_base != null) {
		var _this = byteware_graphics_Font.g_font_base;
		tmp = (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null;
	} else {
		tmp = true;
	}
	if(tmp) {
		return false;
	}
	var _this1 = byteware_graphics_Font.g_font_base;
	byteware_graphics_Font.defaultFont = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
	return true;
};
byteware_graphics_Font.getFont = function(name) {
	if(byteware_graphics_Font.g_font_base == null) {
		return null;
	} else {
		var tmp;
		if(name != null) {
			var _this = byteware_graphics_Font.g_font_base;
			tmp = (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return byteware_graphics_Font.defaultFont;
		} else {
			var _this1 = byteware_graphics_Font.g_font_base;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
	}
};
byteware_graphics_Font.hasFont = function(name) {
	if(byteware_graphics_Font.g_font_base != null) {
		var _this = byteware_graphics_Font.g_font_base;
		return (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null;
	} else {
		return false;
	}
};
byteware_graphics_Font.prototype = {
	dispose: function() {
		this.c_glyphs = null;
		this.texture = null;
	}
	,addGlyph: function(charCode,x,y,w,h) {
		return this.addExternalGlyph(charCode,this.texture,x,y,w,h);
	}
	,addExternalGlyph: function(charCode,external_texture,x,y,w,h) {
		var glyph = new byteware_graphics_Glyph(charCode);
		glyph.setTexture(external_texture,x,y,w,h);
		this.c_glyphs.h[charCode] = glyph;
		return glyph;
	}
	,getGlyph: function(charCode) {
		return this.c_glyphs.h[charCode];
	}
	,__class__: byteware_graphics_Font
};
var byteware_format_FontFNT = function(font_name,font_texture,font_fnt,make_default,register_font) {
	if(register_font == null) {
		register_font = true;
	}
	if(make_default == null) {
		make_default = false;
	}
	byteware_graphics_Font.call(this,font_name,font_texture,make_default,register_font);
	this.parse(font_fnt);
};
byteware_format_FontFNT.__name__ = ["byteware","format","FontFNT"];
byteware_format_FontFNT.__super__ = byteware_graphics_Font;
byteware_format_FontFNT.prototype = $extend(byteware_graphics_Font.prototype,{
	parse: function(data) {
		var xml = Xml.parse(data);
		var info = xml.elementsNamed("info").next();
		if(info == null) {
			xml = xml.firstElement();
			info = xml.elementsNamed("info").next();
		}
		var common = xml.elementsNamed("common").next();
		this.size = Std.parseInt(info.get("size"));
		this.lineHeight = Std.parseInt(common.get("lineHeight"));
		if(this.size < 0) {
			this.size *= -1;
		}
		var chars = xml.elementsNamed("chars").next();
		var $char = chars.elementsNamed("char");
		while($char.hasNext()) {
			var char1 = $char.next();
			var charCode = Std.parseInt(char1.get("id"));
			var x = Std.parseInt(char1.get("x"));
			var y = Std.parseInt(char1.get("y"));
			var w = Std.parseInt(char1.get("width"));
			var h = Std.parseInt(char1.get("height"));
			var offsetX = Std.parseInt(char1.get("xoffset"));
			var offsetY = Std.parseInt(char1.get("yoffset"));
			var advance = Std.parseInt(char1.get("xadvance"));
			var glyph = this.addExternalGlyph(charCode,this.texture,x,y,w,h);
			glyph.setOffsets(offsetX,offsetY,advance);
		}
		if(xml.exists("kernings")) {
			var kernings = xml.elementsNamed("kernings").next();
			var kerning = kernings.elementsNamed("kerning");
			while(kerning.hasNext()) {
				var kerning1 = kerning.next();
				var charCode1 = Std.parseInt(kerning1.get("first"));
				var first = this.getGlyph(charCode1);
				if(first != null) {
					var second = Std.parseInt(kerning1.get("second"));
					var amount = Std.parseInt(kerning1.get("amount"));
					first.setKerning(second,amount);
				}
			}
		}
	}
	,__class__: byteware_format_FontFNT
});
var byteware_geom_Mat = function(a,b,c,d,e,f) {
	if(f == null) {
		f = 0.0;
	}
	if(e == null) {
		e = 0.0;
	}
	if(d == null) {
		d = 1.0;
	}
	if(c == null) {
		c = 0.0;
	}
	if(b == null) {
		b = 0.0;
	}
	if(a == null) {
		a = 1.0;
	}
	this.set(a,b,c,d,e,f);
};
byteware_geom_Mat.__name__ = ["byteware","geom","Mat"];
byteware_geom_Mat.prototype = {
	set: function(a,b,c,d,e,f) {
		if(f == null) {
			f = 0.0;
		}
		if(e == null) {
			e = 0.0;
		}
		if(d == null) {
			d = 1.0;
		}
		if(c == null) {
			c = 0.0;
		}
		if(b == null) {
			b = 0.0;
		}
		if(a == null) {
			a = 1.0;
		}
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.e = e;
		this.f = f;
	}
	,copy: function(to) {
		if(to == null) {
			to = new byteware_geom_Mat(this.a,this.b,this.c,this.d,this.e,this.f);
		} else {
			to.set(this.a,this.b,this.c,this.d,this.e,this.f);
		}
		return to;
	}
	,translate: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.e += x;
		this.f += y;
	}
	,scale: function(x,y) {
		if(y == null) {
			y = 1.0;
		}
		if(x == null) {
			x = 1.0;
		}
		this.a *= x;
		this.b *= y;
		this.c *= x;
		this.d *= y;
		this.e *= x;
		this.f *= y;
	}
	,skew: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var sin_x = Math.sin(x);
		var cos_x = Math.cos(x);
		var sin_y = Math.sin(y);
		var cos_y = Math.cos(y);
		this.set(this.a * cos_y - this.b * sin_x,this.a * sin_y + this.b * cos_x,this.c * cos_y - this.d * sin_x,this.c * sin_y + this.d * cos_x,this.e * cos_y - this.f * sin_x,this.e * sin_y + this.f * cos_x);
	}
	,multiply: function(mat) {
		var x = this.a * mat.a + this.c * mat.b;
		var y = this.a * mat.c + this.c * mat.d;
		var z = this.a * mat.e + this.c * mat.f + this.e;
		this.a = x;
		this.c = y;
		this.e = z;
		x = this.b * mat.a + this.d * mat.b;
		y = this.b * mat.c + this.d * mat.d;
		z = this.b * mat.e + this.d * mat.f + this.f;
		this.b = x;
		this.d = y;
		this.f = z;
	}
	,invert: function(to) {
		var det = this.a * this.d - this.c * this.b;
		if(det == 0.0) {
			return false;
		}
		if(to == null) {
			this.set(this.d / det,-this.c / det,-this.b / det,this.a / det,(this.c * this.f - this.d * this.e) / det,(this.b * this.e - this.a * this.f) / det);
		} else {
			to.set(this.d / det,-this.c / det,-this.b / det,this.a / det,(this.c * this.f - this.d * this.e) / det,(this.b * this.e - this.a * this.f) / det);
		}
		return true;
	}
	,rotate_deg: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var e1 = this.e * cos - this.f * sin;
		this.f = this.e * sin + this.f * cos;
		this.e = e1;
	}
	,rotate_rad: function(angle) {
		this.rotate_deg(angle * 180.0 / 3.141592653589793);
	}
	,determinant: function() {
		return this.a * this.d - this.c * this.b;
	}
	,transformCoords: function(x,y,to) {
		var pos_x = this.a * x + this.c * y + this.e;
		var pos_y = this.d * y + this.b * x + this.f;
		if(to == null) {
			to = new byteware_geom_Pos(pos_x,pos_y);
		} else {
			to.set(pos_x,pos_y);
		}
		return to;
	}
	,inv_transformCoords: function(x,y,to) {
		if(to == null) {
			to = new byteware_geom_Pos(x,y);
		} else {
			to.set(x,y);
		}
		var det = this.determinant();
		if(det == 0.0) {
			return to;
		}
		x -= this.e;
		y -= this.f;
		to.x = (x * this.d - y * this.c) / det;
		to.y = (y * this.a - x * this.b) / det;
		return to;
	}
	,transformPos: function(pos,to) {
		this.transformCoords(pos.x,pos.y,to == null ? pos : to);
	}
	,inv_transformPos: function(pos,to) {
		this.inv_transformCoords(pos.x,pos.y,to == null ? pos : to);
	}
	,transformRect: function(rect,to) {
		var x0 = this.a * rect.x + this.c * rect.y;
		var x1 = x0;
		var y0 = this.b * rect.x + this.d * rect.y;
		var y1 = y0;
		var x = this.a * rect.get_r() + this.c * rect.y;
		var y = this.b * rect.get_r() + this.d * rect.y;
		if(x < x0) {
			x0 = x;
		}
		if(x > x1) {
			x1 = x;
		}
		if(y < y0) {
			y0 = y;
		}
		if(y > y1) {
			y1 = y;
		}
		x = this.a * rect.get_r() + this.c * rect.get_b();
		y = this.b * rect.get_r() + this.d * rect.get_b();
		if(x < x0) {
			x0 = x;
		}
		if(x > x1) {
			x1 = x;
		}
		if(y < y0) {
			y0 = y;
		}
		if(y > y1) {
			y1 = y;
		}
		x = this.a * rect.x + this.c * rect.get_b();
		y = this.b * rect.x + this.d * rect.get_b();
		if(x < x0) {
			x0 = x;
		}
		if(x > x1) {
			x1 = x;
		}
		if(y < y0) {
			y0 = y;
		}
		if(y > y1) {
			y1 = y;
		}
		if(to == null) {
			rect.set(x0 + this.e,y0 + this.f,x1 - x0,y1 - y0);
		} else {
			to.set(x0 + this.e,y0 + this.f,x1 - x0,y1 - y0);
		}
	}
	,__class__: byteware_geom_Mat
};
var byteware_geom_Pos = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.set(x,y);
};
byteware_geom_Pos.__name__ = ["byteware","geom","Pos"];
byteware_geom_Pos.prototype = {
	set: function(x,y) {
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.x = x;
		this.y = y;
	}
	,copy: function(to) {
		if(to == null) {
			to = new byteware_geom_Pos(this.x,this.y);
		} else {
			to.set(this.x,this.y);
		}
		return to;
	}
	,__class__: byteware_geom_Pos
};
var byteware_geom_Rect = function(x,y,w,h) {
	if(h == null) {
		h = 0.0;
	}
	if(w == null) {
		w = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.set(x,y,w,h);
};
byteware_geom_Rect.__name__ = ["byteware","geom","Rect"];
byteware_geom_Rect.prototype = {
	set: function(x,y,w,h) {
		if(h == null) {
			h = 0.0;
		}
		if(w == null) {
			w = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.x = x;
		this.y = y;
		this.w = w;
		this.h = h;
	}
	,copy: function(to) {
		if(to == null) {
			to = new byteware_geom_Rect(this.x,this.y,this.w,this.h);
		} else {
			to.set(this.x,this.y,this.w,this.h);
		}
		return to;
	}
	,align: function(to) {
		if(this.w > to.w) {
			this.x = (to.w - this.w) * .5;
		} else {
			if(this.x < to.x) {
				this.x = to.x;
			}
			if(this.get_r() > to.get_r()) {
				this.set_r(to.get_r());
			}
		}
		if(this.h > to.h) {
			this.y = (to.h - this.h) * .5;
		} else {
			if(this.y < to.y) {
				this.y = to.y;
			}
			if(this.get_b() > to.get_b()) {
				this.set_b(to.get_b());
			}
		}
	}
	,expand: function(rect) {
		if(this.w == 0.0 && this.h == 0.0) {
			this.set(rect.x,rect.y,rect.w,rect.h);
		} else {
			var cr = this.get_r();
			var cb = this.get_b();
			if(this.x > rect.x) {
				this.x = rect.x;
				this.w = cr - this.x;
			}
			if(this.y > rect.y) {
				this.y = rect.y;
				this.h = cb - this.y;
			}
			if(cr < rect.x + rect.w) {
				this.w = rect.x + rect.w - this.x;
			}
			if(cb < rect.y + rect.h) {
				this.h = rect.y + rect.h - this.y;
			}
		}
	}
	,normalize: function() {
		if(this.w < 0.0) {
			this.w = -this.w;
			this.x -= this.w;
		}
		if(this.h < 0.0) {
			this.h = -this.h;
			this.y -= this.h;
		}
	}
	,equals: function(rect) {
		if(this.x == rect.x && this.y == rect.y && this.w == rect.w) {
			return this.h == rect.h;
		} else {
			return false;
		}
	}
	,containsCoords: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_r()) {
			return y < this.get_b();
		} else {
			return false;
		}
	}
	,containsPos: function(pos) {
		return this.containsCoords(pos.x,pos.y);
	}
	,get_l: function() {
		return this.x;
	}
	,set_l: function(val) {
		this.w -= val - this.x;
		return this.x = val;
	}
	,get_r: function() {
		return this.x + this.w;
	}
	,set_r: function(val) {
		this.w = val - this.x;
		return val;
	}
	,get_t: function() {
		return this.y;
	}
	,set_t: function(val) {
		this.h -= val - this.y;
		return this.y = val;
	}
	,get_b: function() {
		return this.y + this.h;
	}
	,set_b: function(val) {
		this.h = val - this.y;
		return val;
	}
	,__class__: byteware_geom_Rect
};
var byteware_graphics_Glyph = function(char_code) {
	this.charCode = char_code;
	this.texture = null;
	this.x = this.y = this.w = this.h = this.offsetX = this.offsetY = this.advance = 0;
};
byteware_graphics_Glyph.__name__ = ["byteware","graphics","Glyph"];
byteware_graphics_Glyph.prototype = {
	setTexture: function(font_texture,pos_x,pos_y,glyph_w,glyph_h) {
		this.texture = font_texture;
		this.x = pos_x;
		this.y = pos_y;
		this.w = glyph_w;
		this.h = glyph_h;
	}
	,getKerning: function(charCode) {
		if(this.c_kernings == null) {
			return 0;
		} else {
			return this.c_kernings.h[charCode] | 0;
		}
	}
	,setKerning: function(charCode,amount) {
		if(this.c_kernings == null) {
			this.c_kernings = new haxe_ds_IntMap();
		}
		this.c_kernings.h[charCode] = amount;
	}
	,setOffsets: function(offset_x,offset_y,advance_offset) {
		this.offsetX = offset_x;
		this.offsetY = offset_y;
		this.advance = advance_offset;
	}
	,draw: function(context,pos_x,pos_y) {
		if(this.w > 0) {
			context.drawTextureRegion(this.texture,pos_x,pos_y + this.offsetY,this.x,this.y,this.w,this.h);
		}
	}
	,__class__: byteware_graphics_Glyph
};
var byteware_graphics_Spritesheet = function() {
	this.c_base_texture = new haxe_ds_StringMap();
};
byteware_graphics_Spritesheet.__name__ = ["byteware","graphics","Spritesheet"];
byteware_graphics_Spritesheet.prototype = {
	addTexture: function(source,name,x,y,w,h,pivotX,pivotY) {
		if(pivotY == null) {
			pivotY = 0.0;
		}
		if(pivotX == null) {
			pivotX = 0.0;
		}
		var texture = new byteware_graphics_Texture(source,x,y,w,h,pivotX,pivotY);
		var _this = this.c_base_texture;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,texture);
		} else {
			_this.h[name] = texture;
		}
		return texture;
	}
	,getTexture: function(name) {
		var _this = this.c_base_texture;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,removeTexture: function(name) {
		return this.c_base_texture.remove(name);
	}
	,__class__: byteware_graphics_Spritesheet
};
var byteware_graphics_Texture = function(texture_asset,offset_x,offset_y,width,height,pivot_x,pivot_y) {
	this.set(texture_asset,offset_x,offset_y,width,height,pivot_x,pivot_y);
};
byteware_graphics_Texture.__name__ = ["byteware","graphics","Texture"];
byteware_graphics_Texture.prototype = {
	set: function(texture_asset,offset_x,offset_y,width,height,pivot_x,pivot_y) {
		this.asset = texture_asset;
		this.x = offset_x < 0 ? 0 : offset_x;
		this.y = offset_y < 0 ? 0 : offset_y;
		this.w = width > this.asset.w ? this.asset.w : width;
		this.h = height > this.asset.h ? this.asset.h : height;
		this.pivotX = pivot_x;
		this.pivotY = pivot_y;
		this.id = -1;
	}
	,copy: function(to) {
		to = this.getTexture(0,0,this.w,this.h,this.pivotX,this.pivotY,to);
		to.id = this.id;
		return to;
	}
	,getTexture: function(offset_x,offset_y,width,height,pivot_x,pivot_y,to) {
		if(pivot_y == null) {
			pivot_y = 0.0;
		}
		if(pivot_x == null) {
			pivot_x = 0.0;
		}
		if(to == null) {
			to = new byteware_graphics_Texture(this.asset,this.x + offset_x,this.y + offset_y,width,height,pivot_x,pivot_y);
		} else {
			to.set(this.asset,this.x + offset_x,this.y + offset_y,width,height,pivot_x,pivot_y);
		}
		return to;
	}
	,__class__: byteware_graphics_Texture
};
var byteware_input_TouchState = { __ename__ : true, __constructs__ : ["BEGIN","MOVE","OVER","END"] };
byteware_input_TouchState.BEGIN = ["BEGIN",0];
byteware_input_TouchState.BEGIN.__enum__ = byteware_input_TouchState;
byteware_input_TouchState.MOVE = ["MOVE",1];
byteware_input_TouchState.MOVE.__enum__ = byteware_input_TouchState;
byteware_input_TouchState.OVER = ["OVER",2];
byteware_input_TouchState.OVER.__enum__ = byteware_input_TouchState;
byteware_input_TouchState.END = ["END",3];
byteware_input_TouchState.END.__enum__ = byteware_input_TouchState;
var byteware_media_MixerChannel = function(channel_name,global) {
	this.isGlobal = global;
	this.isMultiSample = true;
	this.id = -1;
	this.name = channel_name;
	this.numSounds = 0;
	this.c_paused = this.c_muted = this.c_stopped = false;
	this.c_vol = this.c_vol_manual = 1.0;
	this.c_fade_time = .2;
	this.c_base = [];
};
byteware_media_MixerChannel.__name__ = ["byteware","media","MixerChannel"];
byteware_media_MixerChannel.prototype = {
	add: function(sound) {
		var valid = this.c_base.indexOf(sound) == -1;
		if(valid) {
			if(sound.channel != null) {
				sound.channel.remove(sound);
			}
			this.c_base[this.numSounds++] = sound;
			sound.channel = this;
		}
	}
	,remove: function(sound) {
		var i = this.c_base.indexOf(sound);
		if(i != -1) {
			this.c_base.splice(i,1);
			this.numSounds--;
			sound.channel = null;
		}
	}
	,play: function(sound,vol,loop,onComplete,onCompleteArgs) {
		if(loop == null) {
			loop = false;
		}
		if(vol == null) {
			vol = 1.0;
		}
		if(sound == null || this.c_stopped) {
			return false;
		}
		this.add(sound);
		sound.play(vol,loop,onComplete,onCompleteArgs);
		return true;
	}
	,stop: function() {
		var _gthis = this;
		if(this.c_stopped) {
			return;
		}
		if(this.c_fade_time > 0.0) {
			this.c_stopped = true;
			var curr_time = 0.0;
			var curr_coef = 1.0;
			var fade = function(delta) {
				curr_time += delta;
				if(curr_time < _gthis.c_fade_time) {
					curr_coef = curr_time / _gthis.c_fade_time;
					_gthis.c_vol = _gthis.c_vol_manual * curr_coef;
					var i = _gthis.numSounds;
					while(--i > -1) _gthis.c_base[i].event_change_volume();
				} else {
					App.ticker.remove(fade);
					_gthis.c_vol = _gthis.c_vol_manual;
					_gthis.c_stopped = false;
					var i1 = _gthis.numSounds;
					while(--i1 > -1) _gthis.c_base[i1].stop();
				}
			};
			App.ticker.add(fade);
		} else {
			var i2 = this.numSounds;
			while(--i2 > -1) this.c_base[i2].stop();
		}
	}
	,event_activate: function(state) {
		if(state) {
			var i = -1;
			while(++i < this.numSounds) {
				var sound = this.c_base[i];
				sound.c_paused = sound.c_manual;
				sound.event_change_playback();
			}
		} else {
			var i1 = -1;
			while(++i1 < this.numSounds) {
				var sound1 = this.c_base[i1];
				sound1.c_paused = true;
				sound1.event_change_playback();
			}
		}
	}
	,event_pause: function(state) {
	}
	,get_isPaused: function() {
		return this.c_paused;
	}
	,set_isPaused: function(val) {
		return val;
	}
	,get_isMuted: function() {
		return this.c_muted;
	}
	,set_isMuted: function(val) {
		return val;
	}
	,get_vol: function() {
		return this.c_vol_manual;
	}
	,set_vol: function(val) {
		if(val < 0.0) {
			val = 0.0;
		} else if(val > 1.0) {
			val = 1.0;
		}
		if(val != this.c_vol_manual) {
			this.c_vol = this.c_vol_manual = val;
			var i = -1;
			while(++i < this.numSounds) this.c_base[i].event_change_volume();
		}
		return val;
	}
	,get_fadeTime: function() {
		return this.c_fade_time;
	}
	,set_fadeTime: function(val) {
		if(val < 0.0) {
			val = 0.0;
		}
		return this.c_fade_time = val;
	}
	,__class__: byteware_media_MixerChannel
};
var byteware_media_SingleTrackChannel = function(channel_name,global) {
	byteware_media_MixerChannel.call(this,channel_name,global);
	this.isMultiSample = this.c_fading = false;
	this.c_fade_time = 1.2;
	this.c_curr_sound_to = 1.0;
	this.c_curr_time = this.c_total_time = 0.0;
};
byteware_media_SingleTrackChannel.__name__ = ["byteware","media","SingleTrackChannel"];
byteware_media_SingleTrackChannel.__super__ = byteware_media_MixerChannel;
byteware_media_SingleTrackChannel.prototype = $extend(byteware_media_MixerChannel.prototype,{
	play: function(sound,vol,loop,onComplete,onCompleteArgs) {
		if(loop == null) {
			loop = false;
		}
		if(vol == null) {
			vol = 1.0;
		}
		if(sound == null || sound == this.c_curr_sound) {
			return false;
		}
		if(this.c_fade_time > 0.0) {
			this.add(sound);
			this.c_curr_sound = sound;
			this.c_curr_sound_to = vol;
			this.c_total_time = this.c_fade_time;
			this.c_curr_sound.play(0.0,loop,onComplete,onCompleteArgs);
			if(!this.c_fading) {
				this.c_fading = true;
				this.c_curr_time = 0.0;
				App.ticker.add($bind(this,this.func_fade));
			}
		} else {
			if(this.c_curr_sound != null) {
				this.c_curr_sound.stop();
			}
			this.c_curr_sound = sound;
			this.add(sound);
			this.c_curr_sound.play(vol,loop,onComplete,onCompleteArgs);
		}
		return true;
	}
	,stop: function() {
		if(this.c_fade_time > 0.0) {
			this.c_curr_sound = null;
			this.c_curr_time = 0.0;
			this.c_total_time = this.c_fade_time;
			if(!this.c_fading) {
				this.c_fading = true;
				App.ticker.add($bind(this,this.func_fade));
			}
		}
	}
	,func_fade: function(delta) {
		this.c_curr_time += delta;
		if(this.c_curr_time < this.c_total_time) {
			var curr_vol = this.c_curr_time / this.c_total_time;
			var prev_vol = 1.0 - curr_vol;
			var i = this.numSounds;
			while(--i > -1) {
				var sound = this.c_base[i];
				if(sound == this.c_curr_sound) {
					sound.set_vol(this.c_curr_sound_to * curr_vol);
				} else {
					var _g = sound;
					_g.set_vol(_g.get_vol() * prev_vol);
				}
			}
		} else {
			var i1 = this.numSounds;
			while(--i1 > -1) {
				var sound1 = this.c_base[i1];
				if(sound1 == this.c_curr_sound) {
					this.c_curr_sound.set_vol(this.c_curr_sound_to);
				} else {
					sound1.stop();
				}
			}
			if(this.cf_fade_comp != null) {
				this.cf_fade_comp();
				this.cf_fade_comp = null;
			}
			App.ticker.remove($bind(this,this.func_fade));
			this.c_fading = false;
		}
	}
	,event_pause: function(state) {
		var _gthis = this;
		if(this.c_curr_sound == null) {
			return;
		}
		this.c_curr_sound_to = 0.0;
		this.c_curr_time = 0.0;
		this.c_total_time = .2;
		if(state) {
			this.cf_fade_comp = function() {
				_gthis.c_curr_sound.c_paused = true;
				_gthis.c_curr_sound.event_change_playback();
			};
		} else {
			this.c_curr_sound.c_paused = false;
			this.c_curr_sound.event_change_playback();
		}
		if(!this.c_fading) {
			this.c_fading = true;
			App.ticker.add($bind(this,this.func_fade));
		}
	}
	,__class__: byteware_media_SingleTrackChannel
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	var _g = position;
	while(_g1 < _g) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		return null;
	}
};
var platform_Context = function() {
};
platform_Context.__name__ = ["platform","Context"];
platform_Context.prototype = {
	save: function() {
	}
	,restore: function() {
	}
	,pre_render: function() {
	}
	,post_render: function() {
	}
	,transform: function(a,b,c,d,e,f) {
	}
	,translate: function(x,y) {
	}
	,scale: function(x,y) {
	}
	,rotate_deg: function(angle) {
	}
	,rotate_rad: function(angle) {
	}
	,resize: function(w,h) {
	}
	,adjustAlpha: function(coef) {
	}
	,setAlpha: function(coef) {
	}
	,crop: function(x,y,w,h) {
	}
	,drawRect: function(color,x,y,w,h) {
	}
	,drawTexture: function(texture,x,y) {
	}
	,drawTextureRegion: function(texture,x,y,reg_x,reg_y,reg_w,reg_h) {
	}
	,__class__: platform_Context
};
var platform_Display = function() {
};
platform_Display.__name__ = ["platform","Display"];
platform_Display.prototype = {
	get_w: function() {
		return 0;
	}
	,get_h: function() {
		return 0;
	}
	,__class__: platform_Display
};
var platform_Loader = function(max_slots) {
	this.c_max_slots = max_slots;
	this.event_complete();
};
platform_Loader.__name__ = ["platform","Loader"];
platform_Loader.prototype = {
	add: function(info) {
		var valid = this.c_base.indexOf(info) == -1;
		if(valid) {
			this.c_base[this.numAssets++] = info;
		}
		return valid;
	}
	,remove: function(info) {
		if(this.isLoading) {
			return false;
		}
		var i = this.c_base.indexOf(info);
		if(i != -1) {
			this.c_base.splice(i,1);
			this.numAssets--;
			return true;
		}
		return false;
	}
	,clear: function() {
		if(this.isLoading) {
			return false;
		}
		this.c_base = [];
		this.numAssets = 0;
		return true;
	}
	,start: function(onComplete,onProgress) {
		var _gthis = this;
		if(this.isLoading) {
			return false;
		} else {
			this.isLoading = true;
		}
		if(this.numAssets == 0) {
			if(onComplete != null) {
				onComplete();
			}
			return false;
		}
		this.cf_complete = onComplete;
		this.cf_progress = onProgress;
		var async = function(_) {
			App.ticker.remove(async);
			_gthis.event_start();
		};
		App.ticker.add(async);
		return true;
	}
	,cancel: function(onCanceled,dispose_assets) {
		if(dispose_assets == null) {
			dispose_assets = true;
		}
		return false;
	}
	,loadData: function(path,type,onComplete,onProgress) {
		return false;
	}
	,loadAsset: function(info,onComplete,onProgress) {
		if(info == null) {
			console.log("BOO");
		}
		if(info == null) {
			return false;
		} else {
			var _g = info.type;
			switch(_g[1]) {
			case 0:
				return this.loadData(info.path,byteware_assets_AssetType.TEXTURE,function(data) {
					var exists = info.root != null;
					var prev = exists ? info.root : null;
					var asset = App.platform.get_renderer().createTextureFromNativeData(data,prev);
					if(!exists) {
						info.root = asset;
						asset.info = info;
						Res.setTexture(info.name,asset,true);
					}
					if(onComplete != null) {
						onComplete();
					}
				},onProgress);
			case 1:
				return this.loadData(info.path,byteware_assets_AssetType.STRING,function(data1) {
					Res.setString(info.name,data1,true);
					if(info.flag_remove_entry && info.pack != null) {
						info.pack.remove(info);
					}
					if(onComplete != null) {
						onComplete();
					}
				},onProgress);
			case 2:
				return this.loadData(info.path,byteware_assets_AssetType.SOUND,function(data2) {
					var exists1 = info.root != null;
					var prev1 = exists1 ? info.root : null;
					var asset1 = App.platform.get_sound().createSoundFromNativeData(data2,prev1);
					if(!exists1) {
						info.root = asset1;
						asset1.info = info;
						Res.setSound(info.name,asset1,true);
					}
					if(onComplete != null) {
						onComplete();
					}
				},onProgress);
			}
		}
	}
	,event_start: function() {
		while(this.c_curr_entry < this.c_max_slots) this.loadAsset(this.c_base[this.c_curr_entry++],$bind(this,this.event_next),$bind(this,this.event_progress));
	}
	,event_next: function() {
		this.progress = ++this.c_curr_loaded / this.numAssets;
		if(this.c_curr_entry < this.numAssets) {
			this.loadAsset(this.c_base[this.c_curr_entry++],$bind(this,this.event_next),$bind(this,this.event_progress));
		}
		if(this.cf_progress != null) {
			this.cf_progress(this.progress);
		}
		if(this.progress >= 1.0) {
			this.event_complete();
		}
	}
	,event_progress: function(file_progress) {
		this.progress = (this.c_curr_loaded + file_progress) / this.numAssets;
		if(this.cf_progress != null) {
			this.cf_progress(this.progress);
		}
	}
	,event_complete: function() {
		this.isLoading = false;
		this.progress = 0.0;
		this.numAssets = this.c_curr_loaded = this.c_curr_entry = 0;
		this.c_base = [];
		if(this.cf_complete != null) {
			this.cf_complete();
		}
		this.cf_complete = null;
		this.cf_progress = null;
	}
	,__class__: platform_Loader
};
var platform_Platform = function(app_name) {
};
platform_Platform.__name__ = ["platform","Platform"];
platform_Platform.prototype = {
	get_display: function() {
		return null;
	}
	,get_renderer: function() {
		return null;
	}
	,get_sound: function() {
		return null;
	}
	,get_loader: function() {
		return null;
	}
	,get_storage: function() {
		return null;
	}
	,__class__: platform_Platform
};
var platform_RendererType = { __ename__ : true, __constructs__ : ["CANVAS","CUSTOM"] };
platform_RendererType.CANVAS = ["CANVAS",0];
platform_RendererType.CANVAS.__enum__ = platform_RendererType;
platform_RendererType.CUSTOM = ["CUSTOM",1];
platform_RendererType.CUSTOM.__enum__ = platform_RendererType;
var platform_Renderer = function(renderer_type,is_gpu) {
	this.type = renderer_type;
	this.isGPU = is_gpu;
};
platform_Renderer.__name__ = ["platform","Renderer"];
platform_Renderer.prototype = {
	pre_render: function() {
		this.context.pre_render();
	}
	,post_render: function() {
		this.context.post_render();
	}
	,createTexture: function(w,h,to) {
		return null;
	}
	,createTextureFromNativeData: function(textureData,to) {
		return null;
	}
	,__class__: platform_Renderer
};
var platform_SoundAsset = function() {
	byteware_assets_Asset.call(this);
	this.isStarted = this.c_paused = this.c_manual = false;
	this.c_vol = -1.0;
	this.c_loop = false;
};
platform_SoundAsset.__name__ = ["platform","SoundAsset"];
platform_SoundAsset.__super__ = byteware_assets_Asset;
platform_SoundAsset.prototype = $extend(byteware_assets_Asset.prototype,{
	play: function(vol,loop,onComplete,onCompleteArgs) {
		if(loop == null) {
			loop = false;
		}
		if(vol == null) {
			vol = 1.0;
		}
		this.set_loop(loop);
		this.set_vol(vol);
		this.cf_comp = onComplete;
		this.cf_comp_args = onCompleteArgs;
	}
	,stop: function() {
	}
	,event_change_volume: function() {
	}
	,event_change_playback: function() {
	}
	,event_sound_complete: function() {
		if(!this.c_loop) {
			this.stop();
		}
		ReflectTools.call(this.cf_comp,this.cf_comp_args);
	}
	,get_isPaused: function() {
		return this.c_manual;
	}
	,set_isPaused: function(val) {
		if(val != this.c_manual) {
			this.c_manual = this.c_paused = val;
			this.event_change_playback();
		}
		return val;
	}
	,get_vol: function() {
		return this.c_vol;
	}
	,set_vol: function(val) {
		if(val < 0.0) {
			val = 0.0;
		} else if(val > 1.0) {
			val = 1.0;
		}
		if(val != this.c_vol) {
			this.c_vol = val;
			this.event_change_volume();
		}
		return val;
	}
	,get_loop: function() {
		return this.c_loop;
	}
	,set_loop: function(val) {
		return this.c_loop = val;
	}
	,__class__: platform_SoundAsset
});
var platform_SoundSystemType = { __ename__ : true, __constructs__ : ["DEFAULT","CUSTOM"] };
platform_SoundSystemType.DEFAULT = ["DEFAULT",0];
platform_SoundSystemType.DEFAULT.__enum__ = platform_SoundSystemType;
platform_SoundSystemType.CUSTOM = ["CUSTOM",1];
platform_SoundSystemType.CUSTOM.__enum__ = platform_SoundSystemType;
var platform_SoundSystem = function(sound_system_type) {
	this.type = sound_system_type;
};
platform_SoundSystem.__name__ = ["platform","SoundSystem"];
platform_SoundSystem.prototype = {
	createSoundFromNativeData: function(soundData,to) {
		return null;
	}
	,__class__: platform_SoundSystem
};
var platform_Storage = function(config_name) {
	this.c_name = config_name;
	this.c_base = new haxe_ds_StringMap();
	this.isChanged = false;
};
platform_Storage.__name__ = ["platform","Storage"];
platform_Storage.prototype = {
	load: function() {
		return false;
	}
	,save: function() {
		return false;
	}
	,clear: function() {
		return false;
	}
	,remove: function(name) {
		var exists = this.c_base.remove(name);
		if(exists) {
			this.isChanged = true;
		}
		return exists;
	}
	,get: function(name,default_value) {
		var _this = this.c_base;
		if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null) {
			this.set(name,default_value);
			return default_value;
		}
		var _this1 = this.c_base;
		if(__map_reserved[name] != null) {
			return _this1.getReserved(name);
		} else {
			return _this1.h[name];
		}
	}
	,set: function(name,value) {
		var _this = this.c_base;
		var created = (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null;
		if(name == null || value == null) {
			created = false;
		} else {
			var _this1 = this.c_base;
			if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) != value) {
				this.isChanged = true;
			}
			var _this2 = this.c_base;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,value);
			} else {
				_this2.h[name] = value;
			}
		}
		return created;
	}
	,geti: function(name,default_value) {
		if(default_value == null) {
			default_value = 0;
		}
		var _this = this.c_base;
		if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null) {
			this.set(name,"" + default_value);
			return default_value;
		}
		var _this1 = this.c_base;
		return Std.parseInt(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]);
	}
	,seti: function(name,value) {
		return this.set(name,"" + value);
	}
	,getf: function(name,default_value) {
		if(default_value == null) {
			default_value = 0.0;
		}
		var _this = this.c_base;
		if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null) {
			this.set(name,"" + default_value);
			return default_value;
		}
		var _this1 = this.c_base;
		return parseFloat(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]);
	}
	,setf: function(name,value) {
		return this.set(name,"" + value);
	}
	,getb: function(name,default_value) {
		if(default_value == null) {
			default_value = false;
		}
		var _this = this.c_base;
		if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null) {
			this.set(name,default_value ? "1" : "0");
			return default_value;
		}
		var _this1 = this.c_base;
		return (__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) != "0";
	}
	,setb: function(name,value) {
		return this.set(name,value ? "1" : "0");
	}
	,__class__: platform_Storage
};
var platform_TextureAsset = function(memory_id) {
	byteware_assets_Asset.call(this);
	this.id = memory_id;
	this.w = this.h = 0;
	this.texture = new byteware_graphics_Texture(this,0,0,0,0,0.0,0.0);
};
platform_TextureAsset.__name__ = ["platform","TextureAsset"];
platform_TextureAsset.__super__ = byteware_assets_Asset;
platform_TextureAsset.prototype = $extend(byteware_assets_Asset.prototype,{
	get_context: function() {
		return null;
	}
	,__class__: platform_TextureAsset
});
var platform_html5_CanvasContext = function(canvasElement) {
	platform_Context.call(this);
	this.framebuffer = canvasElement;
	this.framebuffer_ctx = canvasElement.getContext("2d",{ alpha : false});
	this.settings = new platform_html5_CanvasDrawSettings(null);
};
platform_html5_CanvasContext.__name__ = ["platform","html5","CanvasContext"];
platform_html5_CanvasContext.__super__ = platform_Context;
platform_html5_CanvasContext.prototype = $extend(platform_Context.prototype,{
	save: function() {
		this.framebuffer_ctx.save();
		this.settings = this.settings.next();
	}
	,restore: function() {
		this.framebuffer_ctx.restore();
		this.settings = this.settings.prev();
	}
	,pre_render: function() {
		var mat = App.root.get_mat();
		this.framebuffer_ctx.save();
		this.framebuffer_ctx.transform(mat.a,mat.b,mat.c,mat.d,mat.e,mat.f);
		this.framebuffer_ctx.fillStyle = "#000000";
		this.framebuffer_ctx.globalCompositeOperation = "copy";
		this.framebuffer_ctx.fillRect(0.0,0.0,App.WIDTH,App.HEIGHT);
		this.framebuffer_ctx.globalCompositeOperation = "source-over";
		this.framebuffer_ctx.restore();
	}
	,transform: function(a,b,c,d,e,f) {
		this.framebuffer_ctx.transform(a,b,c,d,e,f);
	}
	,translate: function(x,y) {
		this.framebuffer_ctx.translate(x,y);
	}
	,scale: function(x,y) {
		this.framebuffer_ctx.scale(x,y);
	}
	,rotate_deg: function(angle) {
		this.framebuffer_ctx.rotate(angle * 3.141592653589793 / 180.0);
	}
	,rotate_rad: function(angle) {
		this.framebuffer_ctx.rotate(angle);
	}
	,adjustAlpha: function(coef) {
		this.framebuffer_ctx.globalAlpha *= coef;
	}
	,setAlpha: function(coef) {
		this.framebuffer_ctx.globalAlpha = coef;
	}
	,crop: function(x,y,w,h) {
		this.framebuffer_ctx.beginPath();
		this.framebuffer_ctx.rect(x,y,w,h);
		this.framebuffer_ctx.clip();
	}
	,drawRect: function(color,x,y,w,h) {
		var code = (16777215 & color).toString(16);
		while(code.length < 6) code = "0" + code;
		this.framebuffer_ctx.fillStyle = "#" + code;
		this.framebuffer_ctx.fillRect(x,y,w,h);
	}
	,drawTexture: function(texture,x,y) {
		var asset = texture.asset;
		var w = texture.w;
		var h = texture.h;
		this.framebuffer_ctx.drawImage(asset.textureData,texture.x,texture.y,w,h,x,y,w,h);
	}
	,drawTextureRegion: function(texture,x,y,reg_x,reg_y,reg_w,reg_h) {
		var asset = texture.asset;
		this.framebuffer_ctx.drawImage(asset.textureData,texture.x + reg_x,texture.y + reg_y,reg_w,reg_h,x,y,reg_w,reg_h);
	}
	,__class__: platform_html5_CanvasContext
});
var platform_html5_CanvasDrawSettings = function(prev_node) {
	if(prev_node != null) {
		this.c_prev = prev_node;
	} else {
		var curr = new platform_html5_CanvasDrawSettings(this);
		var i = 14;
		while(--i > -1) {
			var next = new platform_html5_CanvasDrawSettings(curr);
			curr = next;
		}
	}
	this.reset();
};
platform_html5_CanvasDrawSettings.__name__ = ["platform","html5","CanvasDrawSettings"];
platform_html5_CanvasDrawSettings.prototype = {
	next: function() {
		var next_node = this.c_next;
		if(next_node == null) {
			next_node = new platform_html5_CanvasDrawSettings(this);
			this.c_next = next_node;
		}
		return next_node;
	}
	,prev: function() {
		this.reset();
		return this.c_prev;
	}
	,reset: function() {
	}
	,__class__: platform_html5_CanvasDrawSettings
};
var platform_html5_CanvasRenderer = function(canvasElement) {
	platform_Renderer.call(this,platform_RendererType.CANVAS,false);
	this.context = new platform_html5_CanvasContext(canvasElement);
	var is_ios = new EReg("(iPhone|iPod|iPad)","").match(window.navigator.userAgent);
	this.useCanvasTextures = is_ios;
};
platform_html5_CanvasRenderer.__name__ = ["platform","html5","CanvasRenderer"];
platform_html5_CanvasRenderer.__super__ = platform_Renderer;
platform_html5_CanvasRenderer.prototype = $extend(platform_Renderer.prototype,{
	createTexture: function(w,h,to) {
		if(to == null) {
			to = new platform_html5_CanvasTextureAsset(platform_html5_CanvasTools.createCanvas(w,h),-1);
		} else {
			to.upload(platform_html5_CanvasTools.createCanvas(w,h));
		}
		return to;
	}
	,createTextureFromNativeData: function(textureData,to) {
		if(to == null) {
			to = new platform_html5_CanvasTextureAsset(this.useCanvasTextures ? platform_html5_CanvasTools.createCanvasFrom(textureData) : textureData,-1);
		} else {
			to.upload(this.useCanvasTextures ? platform_html5_CanvasTools.createCanvasFrom(textureData) : textureData);
		}
		return to;
	}
	,__class__: platform_html5_CanvasRenderer
});
var platform_html5_CanvasTextureAsset = function(texture_data,memory_id) {
	platform_TextureAsset.call(this,memory_id);
	this.upload(texture_data);
};
platform_html5_CanvasTextureAsset.__name__ = ["platform","html5","CanvasTextureAsset"];
platform_html5_CanvasTextureAsset.__super__ = platform_TextureAsset;
platform_html5_CanvasTextureAsset.prototype = $extend(platform_TextureAsset.prototype,{
	upload: function(data) {
		if(this.textureData != null) {
			this.unload();
		}
		this.textureData = data;
		this.isLoaded = data != null;
		if(this.isLoaded) {
			this.w = data.width;
			this.h = data.height;
			this.texture.set(this,0,0,this.w,this.h,0.0,0.0);
		} else {
			this.w = this.h = 0;
			this.texture.set(this,0,0,0,0,0.0,0.0);
		}
		if(this.e_reloaded != null) {
			this.e_reloaded.dispatch(false,false);
		}
		return this.isLoaded;
	}
	,unload: function() {
		var was_loaded = this.isLoaded;
		this.textureData = null;
		this.c_context = null;
		this.isLoaded = false;
		return was_loaded;
	}
	,getContext2D: function() {
		if(!js_Boot.__instanceof(this.textureData,HTMLCanvasElement)) {
			this.textureData = platform_html5_CanvasTools.createCanvasFrom(this.textureData);
		}
		var canvasElement = this.textureData;
		return canvasElement.getContext("2d",null);
	}
	,get_context: function() {
		if(this.c_context == null) {
			this.getContext2D();
			this.c_context = new platform_html5_CanvasContext(this.textureData);
		}
		return this.c_context;
	}
	,__class__: platform_html5_CanvasTextureAsset
});
var platform_html5_CanvasTools = function() { };
platform_html5_CanvasTools.__name__ = ["platform","html5","CanvasTools"];
platform_html5_CanvasTools.createCanvas = function(w,h) {
	var canvasElement = window.document.createElement("canvas");
	canvasElement.width = w;
	canvasElement.height = h;
	return canvasElement;
};
platform_html5_CanvasTools.createCanvasFrom = function(src) {
	var canvasElement = platform_html5_CanvasTools.createCanvas(src.width,src.height);
	var ctx = canvasElement.getContext("2d",null);
	ctx.save();
	ctx.globalCompositeOperation = "copy";
	ctx.drawImage(src,0,0);
	ctx.restore();
	return canvasElement;
};
var platform_html5_HTML5Display = function(canvasElement) {
	platform_Display.call(this);
	this.canvas = canvasElement;
	window.addEventListener("resize",$bind(this,this.event_resize),false);
	this.resize_w_to = window.innerWidth;
	this.resize_h_to = window.innerHeight;
	this.resize_canvas();
};
platform_html5_HTML5Display.__name__ = ["platform","html5","HTML5Display"];
platform_html5_HTML5Display.__super__ = platform_Display;
platform_html5_HTML5Display.prototype = $extend(platform_Display.prototype,{
	event_resize: function() {
		this.resize_w_to = window.innerWidth;
		this.resize_h_to = window.innerHeight;
		if(!this.is_resizing) {
			this.is_resizing = true;
			window.setTimeout($bind(this,this.resize_canvas),200);
		}
	}
	,resize_canvas: function() {
		var content = this.canvas.parentElement;
		content.style.width = this.resize_w_to + "px";
		content.style.height = this.resize_h_to + "px";
		this.canvas.width = this.resize_w_to;
		this.canvas.height = this.resize_h_to;
		App.event_resize(this.resize_w_to,this.resize_h_to);
		this.is_resizing = false;
	}
	,get_w: function() {
		return this.canvas.width;
	}
	,get_h: function() {
		return this.canvas.height;
	}
	,__class__: platform_html5_HTML5Display
});
var platform_html5_HTML5Extensions = function() { };
platform_html5_HTML5Extensions.__name__ = ["platform","html5","HTML5Extensions"];
platform_html5_HTML5Extensions.load = function(name,object) {
	if(object == null) {
		object = window;
	}
	var ext = Reflect.field(object,name);
	if(ext != null) {
		return { vendor : "", name : name, instance : ext};
	}
	var ext_cap = name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null);
	var ext_name;
	var ext_vendor;
	var ext_instance;
	var i = platform_html5_HTML5Extensions.vendors.length - 1;
	while(--i > -1) {
		ext_vendor = platform_html5_HTML5Extensions.vendors[i];
		ext_name = ext_vendor + ext_cap;
		ext_instance = Reflect.field(object,ext_name);
		if(ext_instance != null) {
			return { vendor : ext_vendor, name : ext_name, instance : ext_instance};
		}
	}
	return null;
};
platform_html5_HTML5Extensions.loadFirst = function(names,object) {
	var i = -1;
	var ii = names.length;
	while(++i < ii) {
		var ext = platform_html5_HTML5Extensions.load(names[i],object);
		if(ext != null) {
			return ext;
		}
	}
	return null;
};
platform_html5_HTML5Extensions.call = function(name,object) {
	var ext = platform_html5_HTML5Extensions.load(name,object);
	if(ext == null) {
		return false;
	} else {
		object[name] = ext.instance;
	}
	return true;
};
platform_html5_HTML5Extensions.setVendorStyle = function(element,name,value) {
	var style = element.style;
	var i = platform_html5_HTML5Extensions.vendors.length;
	while(--i > -1) style.setProperty("-" + platform_html5_HTML5Extensions.vendors[i] + "-" + name,value);
	style.setProperty(name,value);
};
platform_html5_HTML5Extensions.addVendorListener = function(object,type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	var i = platform_html5_HTML5Extensions.vendors.length;
	while(--i > -1) object.addEventListener(platform_html5_HTML5Extensions.vendors[i] + type,listener,capture);
	object.addEventListener(type,listener,capture);
};
var platform_html5_HTML5Loader = function() {
	platform_Loader.call(this,3);
};
platform_html5_HTML5Loader.__name__ = ["platform","html5","HTML5Loader"];
platform_html5_HTML5Loader.__super__ = platform_Loader;
platform_html5_HTML5Loader.prototype = $extend(platform_Loader.prototype,{
	download: function(path,type,onComplete,onProgress) {
		var request = null;
		var start = null;
		var intervalID = 0;
		var hasInterval = false;
		var clearInterval = function() {
			if(hasInterval) {
				hasInterval = false;
				window.clearInterval(intervalID);
			}
		};
		var retries = 3;
		var retry = function() {
			retries -= 1;
			if(retries >= 0) {
				start();
				return true;
			}
			return false;
		};
		start = function() {
			clearInterval();
			if(request != null) {
				request.abort();
			}
			request = new XMLHttpRequest();
			request.open("GET",path,true);
			request.responseType = type;
			var progress = 0.0;
			request.onprogress = function(e) {
				if(!hasInterval) {
					hasInterval = true;
					intervalID = window.setInterval(function() {
						if(request.readyState != 4 && Date.now() - progress > 5000) {
							if(!retry()) {
								clearInterval();
							}
						}
					},1000);
				}
				progress = Date.now();
			};
			request.onprogress = function(e1) {
				if(request.status != 0 || !retry()) {
					clearInterval();
				}
				if(onProgress != null) {
					onProgress(e1.loaded / e1.total);
				}
			};
			request.onload = function(_) {
				var response = request.response;
				if(response == null) {
					response = request.responseText;
				}
				clearInterval();
				onComplete(response);
			};
			request.send();
		};
		start();
	}
	,is_blob_supported: function() {
		if(this.c_detect_blob) {
			this.c_detect_blob = false;
			if(new EReg("\\bSilk\\b","").match(window.navigator.userAgent)) {
				return false;
			}
			if(window.Blob == null) {
				return false;
			}
			var request = new XMLHttpRequest();
			request.open("GET",".",true);
			request.responseType = "blob";
			if(request.responseType != "blob") {
				return false;
			}
			this.c_url = platform_html5_HTML5Extensions.load("URL").instance;
		}
		if(this.c_url != null) {
			return this.c_url.createObjectURL != null;
		} else {
			return false;
		}
	}
	,loadData: function(path,type,onComplete,onProgress) {
		var _gthis = this;
		switch(type[1]) {
		case 0:
			var textureData = window.document.createElement("img");
			textureData.addEventListener("load",function(_) {
				onComplete(textureData);
			},false);
			if(this.is_blob_supported()) {
				this.download(path,"blob",function(blob) {
					textureData.src = _gthis.c_url.createObjectURL(blob);
				},onProgress);
			} else {
				textureData.src = path;
			}
			break;
		case 1:
			this.download(path,"text",onComplete,onProgress);
			break;
		case 2:
			var audioElement = window.document.createElement("audio");
			audioElement.preload = "auto";
			var ref = ++platform_html5_HTML5Loader.c_ref_count;
			if(platform_html5_HTML5Loader.c_ref_elements == null) {
				platform_html5_HTML5Loader.c_ref_elements = new haxe_ds_IntMap();
			}
			platform_html5_HTML5Loader.c_ref_elements.set(ref,audioElement);
			var canplaythrough;
			var progress;
			var error;
			canplaythrough = function(_1) {
				platform_html5_HTML5Loader.c_ref_elements.remove(ref);
				audioElement.removeEventListener("canplaythrough",canplaythrough,false);
				audioElement.removeEventListener("progress",progress,false);
				audioElement.removeEventListener("error",error,false);
				onComplete(audioElement);
			};
			progress = function(e) {
			};
			error = function(_2) {
				platform_html5_HTML5Loader.c_ref_elements.remove(ref);
				audioElement.removeEventListener("canplaythrough",canplaythrough,false);
				audioElement.removeEventListener("progress",progress,false);
				audioElement.removeEventListener("error",error,false);
			};
			audioElement.addEventListener("canplaythrough",canplaythrough,false);
			audioElement.addEventListener("progress",progress,false);
			audioElement.addEventListener("error",error,false);
			audioElement.src = path;
			audioElement.load();
			break;
		}
		return true;
	}
	,__class__: platform_html5_HTML5Loader
});
var platform_html5_HTML5Platform = function(app_name) {
	var _gthis = this;
	platform_Platform.call(this,app_name);
	if(window.navigator.userAgent.indexOf("Linux; U; Android 4") >= 0) {
		var sin = Math.sin;
		var cos = Math.cos;
		Math.sin = function(x) {
			if(x == 0) {
				return 0;
			} else {
				return sin(x);
			}
		};
		Math.cos = function(x1) {
			if(x1 == 0) {
				return 1;
			} else {
				return cos(x1);
			}
		};
	}
	var handler = window.onerror;
	window.onerror = function(message,url,line) {
		if(handler != null) {
			return handler(message,url,line);
		} else {
			return false;
		}
	};
	var canvas = window.document.createElement("canvas");
	var content = window.document.getElementById("content");
	content.style.width = Std.string(window.innerWidth) + "px";
	content.style.height = Std.string(window.innerHeight) + "px";
	content.style.overflow = "hidden";
	content.style.position = "relative";
	content.appendChild(canvas);
	canvas.setAttribute("tabindex","0");
	canvas.style.outlineStyle = "none";
	canvas.style.webkitTapHighlightColor = "transparent";
	canvas.focus();
	canvas.addEventListener("contextmenu",function(event) {
		event.preventDefault();
	},false);
	this.c_display = new platform_html5_HTML5Display(canvas);
	this.c_renderer = new platform_html5_CanvasRenderer(canvas);
	this.c_sound = new platform_html5_HTML5SoundSystem();
	this.c_loader = new platform_html5_HTML5Loader();
	this.c_storage = new platform_html5_HTML5Storage(app_name,js_Browser.getLocalStorage());
	var last_touch = 0.0;
	var mouse_down = false;
	content.style.msTouchAction = "none";
	var onMouse = function(e) {
		if(e.timeStamp - last_touch < 1000) {
			return;
		}
		var bounds = canvas.getBoundingClientRect();
		var x2 = (e.clientX - bounds.left) * _gthis.c_display.get_w() / bounds.width;
		var y = (e.clientY - bounds.top) * _gthis.c_display.get_h() / bounds.height;
		var _g = e.type;
		switch(_g) {
		case "mousedown":
			if(e.target != canvas) {
				return;
			}
			e.preventDefault();
			App.root.submitTouch(0,x2,y,byteware_input_TouchState.BEGIN);
			canvas.focus();
			mouse_down = true;
			break;
		case "mousemove":
			App.root.submitTouch(0,x2,y,mouse_down ? byteware_input_TouchState.MOVE : byteware_input_TouchState.OVER);
			break;
		case "mouseup":
			App.root.submitTouch(0,x2,y,byteware_input_TouchState.END);
			break;
		case "DOMMouseScroll":case "mousewheel":
			break;
		}
	};
	window.addEventListener("mousedown",onMouse,false);
	window.addEventListener("mousemove",onMouse,false);
	window.addEventListener("mouseup",onMouse,false);
	canvas.addEventListener("mousewheel",onMouse,false);
	canvas.addEventListener("DOMMouseScroll",onMouse,false);
	var st_touch = typeof(window.ontouchstart) != "undefined";
	var onTouch = function(e1) {
		var touch = st_touch ? e1.changedTouches[0] : e1;
		var bounds1 = e1.target.getBoundingClientRect();
		last_touch = e1.timeStamp;
		var _g1 = e1.type;
		switch(_g1) {
		case "MSPointerMove":case "pointermove":case "touchmove":
			e1.preventDefault();
			App.root.submitTouch(0,(touch.clientX - bounds1.left) * _gthis.c_display.get_w() / bounds1.width,(touch.clientY - bounds1.top) * _gthis.c_display.get_h() / bounds1.height,byteware_input_TouchState.MOVE);
			break;
		case "MSPointerUp":case "pointerup":case "touchcancel":case "touchend":
			App.root.submitTouch(0,(touch.clientX - bounds1.left) * _gthis.c_display.get_w() / bounds1.width,(touch.clientY - bounds1.top) * _gthis.c_display.get_h() / bounds1.height,byteware_input_TouchState.END);
			break;
		case "MSPointerDown":case "pointerdown":case "touchstart":
			e1.preventDefault();
			App.root.submitTouch(0,(touch.clientX - bounds1.left) * _gthis.c_display.get_w() / bounds1.width,(touch.clientY - bounds1.top) * _gthis.c_display.get_h() / bounds1.height,byteware_input_TouchState.BEGIN);
			break;
		}
	};
	if(st_touch) {
		canvas.addEventListener("touchstart",onTouch,false);
		canvas.addEventListener("touchmove",onTouch,false);
		canvas.addEventListener("touchend",onTouch,false);
		canvas.addEventListener("touchcancel",onTouch,false);
	} else {
		canvas.addEventListener("MSPointerDown",onTouch,false);
		canvas.addEventListener("MSPointerMove",onTouch,false);
		canvas.addEventListener("MSPointerUp",onTouch,false);
	}
	var onKey = function(e2) {
		var _g2 = e2.type;
		switch(_g2) {
		case "keydown":
			break;
		case "keyup":
			break;
		}
	};
	canvas.addEventListener("keydown",onKey,false);
	canvas.addEventListener("keyup",onKey,false);
	var hiddenApi = platform_html5_HTML5Extensions.load("hidden",window.document);
	if(hiddenApi.instance != null) {
		var onVisibilityChanged = function(_) {
			var state = Reflect.field(window.document,hiddenApi.name);
			if(state) {
				App.event_deactivate();
			} else {
				App.event_activate();
			}
		};
		onVisibilityChanged(null);
	} else {
		var onPageTransitionChange = function(event1) {
			var state1 = event1.type == "pagehide";
			if(state1) {
				App.event_deactivate();
			} else {
				App.event_activate();
			}
		};
		window.addEventListener("pageshow",onPageTransitionChange,false);
		window.addEventListener("pagehide",onPageTransitionChange,false);
	}
	window.addEventListener("blur",function(_1) {
		App.event_deactivate();
	},false);
	window.addEventListener("focus",function(_2) {
		App.event_activate();
	},false);
	window.addEventListener("unload",function(_3) {
		App.onExit.dispatch(true,true);
	},false);
	var requestAnimationFrame = platform_html5_HTML5Extensions.load("requestAnimationFrame").instance;
	if(requestAnimationFrame == null) {
		window.setInterval(App.event_render,16);
	} else {
		var func_loop = null;
		func_loop = function() {
			App.event_render();
			requestAnimationFrame(func_loop,canvas);
		};
		requestAnimationFrame(func_loop,canvas);
	}
};
platform_html5_HTML5Platform.__name__ = ["platform","html5","HTML5Platform"];
platform_html5_HTML5Platform.__super__ = platform_Platform;
platform_html5_HTML5Platform.prototype = $extend(platform_Platform.prototype,{
	get_display: function() {
		return this.c_display;
	}
	,get_renderer: function() {
		return this.c_renderer;
	}
	,get_sound: function() {
		return this.c_sound;
	}
	,get_loader: function() {
		return this.c_loader;
	}
	,get_storage: function() {
		return this.c_storage;
	}
	,__class__: platform_html5_HTML5Platform
});
var platform_html5_HTML5SoundAsset = function(element) {
	platform_SoundAsset.call(this);
	if(element != null) {
		this.audioElement = element;
		this.audioElement.addEventListener("ended",$bind(this,this.event_sound_complete),false);
	}
};
platform_html5_HTML5SoundAsset.__name__ = ["platform","html5","HTML5SoundAsset"];
platform_html5_HTML5SoundAsset.__super__ = platform_SoundAsset;
platform_html5_HTML5SoundAsset.prototype = $extend(platform_SoundAsset.prototype,{
	upload: function(data) {
		this.unload();
		var element = data;
		if(element == null) {
			return this.isLoaded = false;
		} else {
			this.audioElement = element;
			this.audioElement.addEventListener("ended",$bind(this,this.event_sound_complete),false);
			this.isLoaded = true;
		}
		return true;
	}
	,unload: function() {
		if(this.audioElement == null) {
			return false;
		} else {
			this.stop();
			this.audioElement.removeEventListener("ended",$bind(this,this.event_sound_complete),false);
			this.audioElement = null;
		}
		return true;
	}
	,play: function(vol,loop,onComplete,onCompleteArgs) {
		if(loop == null) {
			loop = false;
		}
		if(vol == null) {
			vol = 1.0;
		}
		platform_SoundAsset.prototype.play.call(this,vol,loop,onComplete,onCompleteArgs);
		if(this.isStarted) {
			this.audioElement.currentTime = 0.0;
		} else {
			this.audioElement.play();
		}
		this.isStarted = true;
	}
	,stop: function() {
		if(this.isStarted) {
			this.isStarted = false;
		} else {
			return;
		}
		this.audioElement.pause();
		this.audioElement.currentTime = 0.0;
	}
	,event_change_volume: function() {
		this.audioElement.volume = this.channel == null ? this.c_vol : this.c_vol * this.channel.c_vol;
	}
	,event_change_playback: function() {
		if(this.c_paused) {
			this.audioElement.pause();
		} else {
			this.audioElement.play();
		}
	}
	,set_loop: function(val) {
		this.audioElement.loop = val;
		return this.c_loop = val;
	}
	,__class__: platform_html5_HTML5SoundAsset
});
var platform_html5_HTML5SoundSystem = function() {
	platform_SoundSystem.call(this,platform_SoundSystemType.DEFAULT);
};
platform_html5_HTML5SoundSystem.__name__ = ["platform","html5","HTML5SoundSystem"];
platform_html5_HTML5SoundSystem.__super__ = platform_SoundSystem;
platform_html5_HTML5SoundSystem.prototype = $extend(platform_SoundSystem.prototype,{
	createSoundFromNativeData: function(soundData,to) {
		if(to == null) {
			to = new platform_html5_HTML5SoundAsset(soundData);
		} else {
			to.upload(soundData);
		}
		return to;
	}
	,__class__: platform_html5_HTML5SoundSystem
});
var platform_html5_HTML5Storage = function(config_name,local_storage) {
	platform_Storage.call(this,"byteware_" + config_name);
	this.c_local_storage = local_storage;
};
platform_html5_HTML5Storage.__name__ = ["platform","html5","HTML5Storage"];
platform_html5_HTML5Storage.__super__ = platform_Storage;
platform_html5_HTML5Storage.prototype = $extend(platform_Storage.prototype,{
	load: function() {
		var raw_data = null;
		try {
			raw_data = this.c_local_storage.getItem(this.c_name);
		} catch( e ) {
		}
		if(raw_data == null) {
			return false;
		} else {
			this.isChanged = false;
		}
		var data = raw_data.split("##");
		var pair;
		var i = data.length;
		while(--i > -1) {
			pair = data[i].split("&&");
			var v = pair[1];
			var _this = this.c_base;
			var key = pair[0];
			if(__map_reserved[key] != null) {
				_this.setReserved(key,v);
			} else {
				_this.h[key] = v;
			}
		}
		return true;
	}
	,save: function() {
		if(!this.isChanged) {
			return false;
		}
		var data = "";
		var sep;
		var key = this.c_base.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(data == "") {
				sep = "";
			} else {
				sep = "##";
			}
			var _this = this.c_base;
			data += sep + key1 + "&&" + (__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
		}
		try {
			this.c_local_storage.setItem(this.c_name,data);
		} catch( e ) {
			return false;
		}
		this.isChanged = false;
		return true;
	}
	,clear: function() {
		try {
			this.c_local_storage.removeItem(this.c_name);
		} catch( e ) {
			return false;
		}
		this.c_base = new haxe_ds_StringMap();
		this.isChanged = false;
		return true;
	}
	,__class__: platform_html5_HTML5Storage
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
App.isStarted = false;
App.isActive = true;
App.isPaused = false;
App.onStarted = new tofu_events_Event0(false,true);
App.onActivate = new tofu_events_Event0(false,false);
App.onDeactivate = new tofu_events_Event0(false,false);
App.onExit = new tofu_events_Event0(false,true);
App.onPause = new tofu_events_Event0(false,false);
App.onResume = new tofu_events_Event0(false,false);
App.onResize = new tofu_events_Event0(false,false);
App.WIDTH = 0;
App.HEIGHT = 0;
App.MIN_WIDTH = 0;
App.MIN_HEIGHT = 0;
App.CURRENT_WIDTH = 0;
App.CURRENT_HEIGHT = 0;
App.TOP = 0;
App.BOTTOM = 0;
App.LEFT = 0;
App.RIGHT = 0;
Main.MIN_FPS = 30;
Main.buns = [];
Main.num_buns = 0;
Main.min_x = 0.0;
Main.max_x = 0.0;
Main.min_y = 0.0;
Main.max_y = 0.0;
Main.gravity = 400;
Main.is_adding_bunnies = false;
Main.fps_elapsed = -2.0;
Main.fps_current = 0;
Main.fps_retries = 3;
Main.target_fps = 55;
Main.stats_fps = [];
MathTools.E = 1e-6;
MathTools.PI = 3.141592653589793;
MathTools.PQ = 0.7853981633974483;
MathTools.P2 = 6.28318530718;
MathTools.PH = 1.5707963267948966;
MathTools.INT_MIN = -2147483648;
MathTools.INT_MAX = 2147483647;
MathTools.FLOAT_MIN = -1.79769313486231e+308;
MathTools.FLOAT_MAX = 1.79769313486231e+308;
Res.g_base_packs = new haxe_ds_StringMap();
Res.g_base_textures = new haxe_ds_StringMap();
Res.g_base_strings = new haxe_ds_StringMap();
Res.g_base_sounds = new haxe_ds_StringMap();
SFX.numChannels = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
byteware_Ticker.globalDelta = 0.0;
byteware_Ticker.numTickers = 0;
byteware_Ticker.g_coef = 1.0;
byteware_Ticker.g_curr = 0.0;
byteware_Ticker.g_prev = 0.0;
byteware_Ticker.g_base = [];
byteware_graphics_Font.numFonts = 0;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
platform_html5_HTML5Extensions.vendors = ["webkit","moz","ms","o","khtml"];
platform_html5_HTML5Loader.c_ref_count = 0;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
